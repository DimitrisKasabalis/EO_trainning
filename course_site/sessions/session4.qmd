### Learning Objectives

By the end of this session, you will be able to:

*   **Access and filter** Sentinel-1 and Sentinel-2 image collections in Google Earth Engine.
*   **Apply** a cloud mask to Sentinel-2 imagery.
*   **Create** a cloud-free composite image.
*   **Export** processed imagery from Google Earth Engine.

### 4.1. Hands-on Google Colab Notebooks

#### Notebook 2: **Google Earth Engine Python API for EO Data**

**Objective:** Teach participants how to use the Earth Engine Python API
in Colab to find, filter, process, and download satellite images
(Sentinel-1 and Sentinel-2) with basic pre-processing like cloud masking
and compositing.

**Contents & Steps:**

- **Earth Engine Initialization:** The notebook starts with:

<!-- -->

- !pip install earthengine-api
      import ee
      ee.Authenticate()
      ee.Initialize()

  With instructions (in markdown) about the authentication process
  (click link, get code, paste). After initialization, they are ready to
  call EE functions.

<!-- -->

- **Defining an Area of Interest (AOI):** The notebook provides a sample
  AOI, for example a rectangle over a part of Luzon or a specific city.
  Possibly:

<!-- -->

- aoi = ee.Geometry.Rectangle([120.9, 14.5, 121.1, 14.7])  # bounding box around Metro Manila

  or use a FeatureCollection like
  `ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017")` filtered for
  Philippines for a country boundary -- but a smaller AOI is better for
  quick results.

<!-- -->

- **Searching Sentinel-2 ImageCollection:** They then create a
  Sentinel-2 ImageCollection query:

<!-- -->

- s2_col = ee.ImageCollection('COPERNICUS/S2_SR') \
                 .filterBounds(aoi) \
                 .filterDate('2021-06-01', '2021-08-31') \
                 .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 50))
      print("Images count:", s2_col.size().getInfo())

  The markdown explains each filter. They then select only relevant
  bands (maybe all 12 reflectance bands except QA, or just the
  visible/NIR for simplicity) using `.select([...])`.

<!-- -->

- **Cloud Mask Function:** Introduce a function to mask clouds in
  Sentinel-2:

<!-- -->

- def mask_clouds(image):
          qa = image.select('QA60')
          # Bits 10 and 11 are clouds and cirrus
          cloud_bit_mask = (1 << 10) | (1 << 11)
          mask = qa.bitwiseAnd(cloud_bit_mask).eq(0)
          return image.updateMask(mask)

  Then apply: `s2_clean = s2_col.map(mask_clouds)`. A short explanation:
  *"The QA60 band's bits 10 and 11 indicate cloudy pixels; this mask
  retains only pixels where those bits are 0 (no cloud)."*

<!-- -->

- **Create a Median Composite:**

<!-- -->

- median_img = s2_clean.median().clip(aoi)

  The notebook notes this takes the per-pixel median across the
  collection date range, yielding one cloud-free image. They then
  visualize or download this composite:

<!-- -->

- **Visualization in Colab:** Perhaps use folium via geemap (if
  introduced) or get a thumbnail:

<!-- -->

- url = median_img.getThumbURL({'region': aoi, 'min':0, 'max':3000, 'bands':['B4','B3','B2']})
      from IPython.display import Image
      Image(url=url)

  This should display a small true-color thumbnail of the composite. The
  markdown might show the output or instruct users to open it.

<!-- -->

- **Downloading the Composite:** Show how to export the image to Google
  Drive:

<!-- -->

- export_task = ee.batch.Export.image.toDrive(**{
          'image': median_img,
          'description': 'Sentinel2_composite_JunAug2021',
          'folder': 'CopPhilTraining',
          'fileNamePrefix': 'S2Composite_Manila_2021',
          'region': aoi.getInfo()['coordinates'],
          'scale': 10,
          'crs': 'EPSG:4326'
      })
      export_task.start()

  Explain that this will save the image in their Drive (the user will
  have to manually download from Drive). Mention that tasks take a few
  minutes; they can check status with `export_task.status()` or in the
  GEE web UI. (Since it's a small region and median, it might finish
  quickly).

<!-- -->

- **Sentinel-1 Example:** The notebook then goes through a similar flow
  for Sentinel-1:

<!-- -->

- s1_col = ee.ImageCollection('COPERNICUS/S1_GRD') \
                 .filterBounds(aoi) \
                 .filterDate('2021-06-01', '2021-06-30') \
                 .filter(ee.Filter.eq('instrumentMode', 'IW')) \
                 .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) \
                 .filter(ee.Filter.eq('resolution_meters', 10)) \
                 .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
      print("Sentinel-1 count:", s1_col.size().getInfo())

  This filters June 2021, IW mode, descending orbit, VV polarization
  only. The notebook explains these filters (mention dual polarization
  is often VV+VH; here we take only VV for demonstration). They then
  take a mean or median:

      s1_img = s1_col.mean().clip(aoi)

  Because SAR has speckle, averaging multiple scenes can reduce noise.
  They then visualize:

      url = s1_img.getThumbURL({'region': aoi, 'min': -20, 'max': 0})
      Image(url=url)

  where -20 to 0 dB might be typical backscatter range. The resulting
  grayscale image shows SAR backscatter over the area.

If time permits, show how to apply a simple threshold or edge detection
on SAR (not necessary, but for fun: e.g., water has low VV backscatter,
so threshold at -15 dB could highlight water -- but perhaps beyond
scope).

- **Downloading Sentinel-1 data:** They could demonstrate how to use
  `ee.batch.Export.image.toDrive` similarly for the SAR composite. Or
  mention using the ASF DAAC for raw data but that's outside of GEE.

- **Using Earth Engine Data Catalog:** Show that one can search for
  datasets programmatically. Perhaps:

<!-- -->

- ee_catalog = ee.data.getList({'id': 'COPERNICUS'})  # fetch info on Copernicus datasets
      for entry in ee_catalog:
          print(entry['id'])

  This might print available dataset IDs. Or encourage them to use the
  Docs tab in the Code Editor or the online catalog. The idea is to make
  participants aware of the huge variety of data (Landsat, MODIS, etc.)
  beyond Sentinel.

<!-- -->

- **Additional GEE functionalities:** Briefly mention that GEE can do a
  lot more:

- Compute statistics: e.g.,
  `median_img.reduceRegion(ee.Reducer.mean(), aoi, scale=10)` to get
  mean reflectance over AOI.

- Time series: one can chart NDVI over time by iterating or using
  `reduceRegions`.

- Machine learning: Earth Engine also offers some built-in ML (Cart,
  SVM, randomForest via `ee.Classifier`) which they might use on Day 2.
  The notebook might not delve deep into these, but perhaps includes one
  example of a reduceRegion or adding NDVI band:

<!-- -->

- ndvi_img = median_img.normalizedDifference(['B8','B4']).rename('NDVI')

  and visualizing NDVI.