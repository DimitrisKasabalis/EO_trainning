### Learning Objectives

By the end of this session, you will be able to:

*   **Load, inspect, and visualize** vector and raster data in Python using GeoPandas and Rasterio.
*   **Perform** basic data manipulation tasks, such as filtering and cropping.
*   **Create** a simple map with overlaid vector and raster data.

### 3.1. Hands-on Google Colab Notebooks

To reinforce the lectures, Day 1 includes two interactive Colab
notebooks that participants will run:

#### Notebook 1: **Python Geospatial Data Handling** (GeoPandas & Rasterio)

**Objective:** Introduce participants to using Python for basic
geospatial data manipulation -- loading, inspecting, and visualizing
vector and raster data -- using libraries GeoPandas and Rasterio within
Google Colab.

**Contents & Steps:**

- **Environment Setup:** The notebook begins with installing required
  libraries (e.g., `geopandas`, `rasterio`, maybe `matplotlib` for
  plotting). It also shows how to mount Google Drive. For example, a
  code cell:

<!-- -->

- !pip install geopandas rasterio
      from google.colab import drive
      drive.mount('/content/drive')

  This ensures participants have the tools and data access. The notebook
  then navigates (if needed) to the data directory (e.g., a shared Drive
  folder containing sample data).

<!-- -->

- **Loading Vector Data with GeoPandas:** The first data example is a
  **Philippine administrative boundaries** shapefile (small enough to
  handle, e.g., boundaries of regions or provinces). The notebook
  demonstrates:

<!-- -->

- import geopandas as gpd
      gdf = gpd.read_file('Philippines_Provinces.shp')
      gdf.head()
      print(gdf.crs)
      print("Number of provinces:", len(gdf))

  This will output a table of the first few features and the coordinate
  reference system. Participants see that GeoPandas stores geometry and
  attributes. The notebook then instructs plotting:

      gdf.plot(figsize=(6,6), column='Region', legend=True)
      plt.title("Philippines Provinces by Region")

  This produces a colored map of provinces by region. The notebook
  explains how the `column` parameter was used to color by an attribute,
  and how GeoPandas auto-selects a color map and adds a legend.

**Exercise:** The notebook might include a small exercise for learners,
like *"Try changing the column to* `'Island_Group'` *or adjust the
cmap."* This encourages interactivity.

- **GeoDataFrame Operations:** Next, the notebook shows how to filter
  spatial data. For example:

<!-- -->

- mindanao = gdf[gdf['Island_Group']=="Mindanao"]
      mindanao.plot(figsize=(5,5), color='orange')
      plt.title("Mindanao Island Group Provinces")

  And similarly, how to get a single province geometry:

      davao = gdf[gdf['Province']=="Davao del Sur"]
      print(davao.geometry.iloc[0])  # Print the polygon coordinates

  It might print a Polygon or MultiPolygon coordinates. The explanation
  emphasizes that we can treat the GeoDataFrame like a pandas DataFrame
  for filtering, and access geometries via the `.geometry` column or
  each row's `geometry` attribute.

<!-- -->

- **Loading Raster Data with Rasterio:** The notebook then moves to
  raster. It uses a **Sentinel-2 image tile (or subset)** covering a
  sample AOI in the Philippines (kept small, e.g., a 100 km² area, to
  reduce file size, perhaps stored as a Cloud-Optimized GeoTIFF or a
  pre-cropped TIFF). Example:

<!-- -->

- import rasterio
      src = rasterio.open('sample_S2.tif')
      print(src.crs, src.width, src.height, src.count, src.transform)

  This displays the projection (e.g., EPSG:32651 for UTM zone if in
  Philippines), raster dimensions, number of bands, and affine
  transform. Then:

      band1 = src.read(1)
      print(band1.shape, band1.dtype, band1.min(), band1.max())

  This reads the first band (say Blue band) as a numpy array and prints
  shape and value range. The notebook explains that `read(1)` gives band
  1; if the image has 3 bands, `read(3)` might be SWIR in Sentinel-2,
  etc.

**Visualization:** To plot a single band:

    import matplotlib.pyplot as plt
    plt.imshow(band1, cmap='gray')
    plt.colorbar(label='Reflectance')
    plt.title("Sentinel-2 Band1 (Coastal Aerosol)")

Or to plot an RGB:

    rgb = np.dstack([src.read(4), src.read(3), src.read(2)])  # B4,B3,B2 = RGB
    plt.imshow(np.clip(rgb * 0.0001, 0, 1))  # assuming reflectances in 0-10000 scale, scale to 0-1
    plt.title("True-color Composite")

The notebook would clarify any scaling applied (Sentinel-2 L2A DN values
need scaling by 1e-4, etc.). The output image should show a reasonably
colored patch of land.

- **Spatial Referencing and Plot Overlays:** Show how to overlay vector
  boundaries on the raster for context. Since `matplotlib` can plot
  both, example:

<!-- -->

- fig, ax = plt.subplots()
      plt.imshow(np.clip(rgb * 0.0001, 0, 1), extent=src.bounds, origin='upper')
      mindanao.boundary.plot(ax=ax, edgecolor='yellow')  # plot outlines of Mindanao provinces
      plt.title("Sentinel-2 with province boundaries")

  The `extent=src.bounds` and `origin='upper'` ensure the image is
  placed in correct coordinates. This illustrates combining data
  sources.

<!-- -->

- **Raster Cropping and Masking:** The notebook then demonstrates
  cropping the raster to a vector AOI using rasterio's mask:

<!-- -->

- from rasterio.mask import mask
      geom = davao.geometry.iloc[0]  # polygon of Davao del Sur
      out_image, out_transform = mask(src, [geom], crop=True)
      print(out_image.shape)  # should be (bands, new_height, new_width)

  Now out_image contains the pixel values just for that province. They
  can plot this subset similarly. The notebook notes that `mask` sets
  values outside the polygon to nodata and returns a smaller window
  covering the polygon. It also likely retrieves `src.meta` and updates
  it for the new transform and dimensions if it were to save the cropped
  image:

      out_meta = src.meta.copy()
      out_meta.update({"height": out_image.shape[1],
                       "width": out_image.shape[2],
                       "transform": out_transform})
      rasterio.open('davao.tif', 'w', **out_meta).write(out_image)

  (Though writing to file in Colab is optional, it shows how to save
  results.)

<!-- -->

- **Basic Raster Calculation:** If time/space permits, include a simple
  calculation, e.g., compute NDVI from bands:

<!-- -->

- nir = src.read(8)  # Band 8 is NIR for Sentinel-2
      red = src.read(4)  # Band 4 is Red
      ndvi = (nir.astype(float) - red.astype(float)) / (nir + red)
      plt.imshow(ndvi, cmap='RdYlGn')
      plt.colorbar(label='NDVI')

  Show an NDVI image where green indicates vegetation. This ties back to
  AI -- using band math to create features.

Throughout Notebook 1, markdown cells explain what each step is doing
and why. The tone is tutorial-like: assume the user is following along
and encourage them to inspect outputs. By the end, they have performed
end-to-end steps: from reading raw data to making a simple map or
analysis, all within Python.