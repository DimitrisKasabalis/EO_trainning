{"title":"Session 3: Hands-on Python for Geospatial Data","markdown":{"yaml":{"title":"Session 3: Hands-on Python for Geospatial Data","subtitle":"Master vector and raster data processing with GeoPandas and Rasterio","date":"last-modified"},"headingText":"Session Overview","containsRefs":false,"markdown":"\n\n::: {.session-info}\n**Duration:** 2 hours | **Format:** Hands-on Coding | **Platform:** Google Colaboratory\n:::\n\n\nThis hands-on session teaches you how to work with geospatial data in Python - the foundation of Earth Observation workflows. You'll use Google Colab (no installation needed!), learn vector data operations with GeoPandas, and master raster processing with Rasterio. By the end, you'll be able to load Philippine administrative boundaries, visualize them, read Sentinel-2 imagery, calculate NDVI, and combine vector and raster operations.\n\n::: {.learning-objectives}\n### Learning Objectives\n\nBy the end of this session, you will be able to:\n\n- **Set up** Google Colaboratory for geospatial analysis\n- **Mount** Google Drive for data access and storage\n- **Install** Python geospatial libraries (GeoPandas, Rasterio)\n- **Read and inspect** vector data (shapefiles, GeoJSON)\n- **Query and filter** geospatial DataFrames\n- **Visualize** vector data with maps\n- **Open and examine** raster files and their metadata\n- **Read** raster bands into NumPy arrays\n- **Calculate** spectral indices (NDVI, NDWI)\n- **Create** RGB composites from multispectral imagery\n- **Clip** rasters to vector boundaries\n- **Combine** vector and raster operations for analysis\n:::\n\n---\n\n## Part 1: Setting Up Google Colaboratory\n\n### What is Google Colab?\n\n**Google Colaboratory (Colab)** is a free cloud-based Jupyter notebook environment that allows you to:\n\n- Write and execute Python code in your browser\n- Access free GPU/TPU for machine learning\n- Collaborate with others in real-time\n- Save notebooks to Google Drive\n- No local installation required!\n\n**Perfect for this training:** Everyone has the same environment, no dependency issues, accessible from anywhere.\n\n### Creating Your First Colab Notebook\n\n::: {.callout-note}\n## Access Colab\n\n**URL:** [https://colab.research.google.com](https://colab.research.google.com)\n\n**Requirements:**\n- Google account\n- Modern web browser (Chrome, Firefox, Safari, Edge)\n- Stable internet connection\n:::\n\n**Steps:**\n\n1. Go to colab.research.google.com\n2. Sign in with your Google account\n3. Click **File → New Notebook**\n4. Rename: **File → Rename** → \"Day1_Session3_Geospatial_Python\"\n\n### Understanding the Colab Interface\n\n**Key components:**\n\n- **Code cells:** Where you write Python code (click or press Enter to edit)\n- **Text cells:** Markdown for documentation (Insert → Text cell)\n- **Run button:** ▶ Execute current cell (or press Shift+Enter)\n- **Runtime menu:** Manage execution environment\n- **Table of Contents:** Navigate long notebooks (left sidebar icon)\n\n**Try it:** Create a code cell and run:\n\n```python\nprint(\"Hello from Google Colab!\")\nprint(\"This is the CopPhil EO AI/ML Training\")\n```\n\nPress **Shift+Enter** to execute. You should see the output below the cell.\n\n### Connecting Google Drive\n\n**Why mount Google Drive?**\n\n- Access data files stored in Drive\n- Save outputs permanently\n- Share data with collaborators\n\n**Mount Drive:**\n\n```python\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n**What happens:**\n\n1. Click the link that appears\n2. Select your Google account\n3. Click \"Allow\" to grant access\n4. Copy the authorization code\n5. Paste into the input field and press Enter\n\n**Verification:**\n\n```python\nimport os\nos.listdir('/content/drive/MyDrive')\n```\n\nYou should see your Google Drive folders listed!\n\n::: {.callout-tip}\n## Organizing Your Data\n\nCreate a folder structure in Google Drive:\n\n```\nMyDrive/\n  CopPhil_Training/\n    data/\n      vector/          # Shapefiles, GeoJSON\n      raster/          # Satellite imagery\n    outputs/           # Processed results\n    notebooks/         # Saved Colab notebooks\n```\n\nThis keeps your training materials organized.\n:::\n\n---\n\n## Part 2: Installing Geospatial Libraries\n\n### Required Libraries\n\nGoogle Colab comes with many libraries pre-installed, but specialized geospatial tools need installation.\n\n**Core libraries we'll use:**\n\n| Library | Purpose |\n|---------|---------|\n| **GeoPandas** | Vector data (shapefiles, GeoJSON, polygons, points) |\n| **Rasterio** | Raster data (GeoTIFF, satellite imagery) |\n| **Shapely** | Geometric operations (included with GeoPandas) |\n| **Matplotlib** | Visualization |\n| **NumPy** | Array operations (pre-installed) |\n\n### Installation\n\nRun this cell (may take 1-2 minutes):\n\n```python\n# Install geospatial libraries\n!pip install geopandas rasterio fiona shapely pyproj -q\n\nprint(\"Installation complete! ✓\")\n```\n\nThe `-q` flag makes installation quiet (less output).\n\n**If you see warnings:** Usually safe to ignore. If errors occur, try:\n\n```python\n!pip install --upgrade geopandas rasterio\n```\n\n### Verify Installation\n\n```python\nimport geopandas as gpd\nimport rasterio\nfrom rasterio.plot import show\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nprint(\"✓ GeoPandas version:\", gpd.__version__)\nprint(\"✓ Rasterio version:\", rasterio.__version__)\nprint(\"✓ All libraries imported successfully!\")\n```\n\n::: {.callout-warning}\n## Runtime Restart\n\nOccasionally, Colab may ask you to restart the runtime after installing libraries:\n\n**Runtime → Restart runtime**\n\nThen re-run your import cell. This is normal!\n:::\n\n---\n\n## Part 3: Python Basics Refresher\n\nQuick recap of Python essentials for geospatial work:\n\n### Data Types\n\n```python\n# Numbers\npopulation = 1780148        # Integer\narea_km2 = 42.88           # Float\n\n# Strings\ncity = \"Manila\"\nprovince = \"Metro Manila\"\n\n# Lists (ordered collections)\nregions = [\"Luzon\", \"Visayas\", \"Mindanao\"]\ncoordinates = [14.5995, 120.9842]  # [latitude, longitude]\n\n# Dictionaries (key-value pairs)\nlocation_info = {\n    \"city\": \"Quezon City\",\n    \"population\": 2960048,\n    \"region\": \"NCR\"\n}\n\nprint(f\"{city} has population {population:,}\")\nprint(f\"Regions: {regions}\")\nprint(f\"Coordinates: {coordinates}\")\n```\n\n### Control Structures\n\n```python\n# If statements\ncloud_cover = 15\n\nif cloud_cover < 10:\n    quality = \"Excellent\"\nelif cloud_cover < 30:\n    quality = \"Good\"\nelse:\n    quality = \"Poor\"\n\nprint(f\"Cloud cover {cloud_cover}%: {quality} for optical imagery\")\n\n# For loops\nprovinces = [\"Palawan\", \"Zambales\", \"Quezon\"]\nfor province in provinces:\n    print(f\"Processing {province}...\")\n\n# List comprehension (Pythonic way)\nprovince_lengths = [len(p) for p in provinces]\nprint(\"Province name lengths:\", province_lengths)\n```\n\n### Functions\n\n```python\ndef calculate_ndvi(nir, red):\n    \"\"\"Calculate Normalized Difference Vegetation Index.\"\"\"\n    ndvi = (nir - red) / (nir + red + 1e-10)  # Add small value to avoid division by zero\n    return ndvi\n\n# Example usage\nnir_value = 0.8\nred_value = 0.2\nresult = calculate_ndvi(nir_value, red_value)\nprint(f\"NDVI: {result:.3f}\")\n```\n\n**Key Python concepts for geospatial:**\n\n- **Indentation matters:** Use 4 spaces to define code blocks\n- **0-indexed:** First element is `list[0]`, not `list[1]`\n- **Method chaining:** `gdf.filter(...).plot()`\n- **Context managers:** `with rasterio.open() as src:` (auto-cleanup)\n\n---\n\n## Part 4: Vector Data with GeoPandas\n\n### What is Vector Data?\n\n**Vector data represents discrete features:**\n\n- **Points:** Cities, field sites, observation locations\n- **Lines:** Roads, rivers, transects\n- **Polygons:** Administrative boundaries, land parcels, watersheds\n\n**Common formats:** Shapefile (.shp), GeoJSON, KML, GeoPackage\n\n### Loading Philippine Administrative Boundaries\n\nLet's load provincial boundaries of the Philippines:\n\n```python\n# Option 1: From Google Drive (if you uploaded data)\nprovinces = gpd.read_file('/content/drive/MyDrive/CopPhil_Training/data/vector/philippines_provinces.shp')\n\n# Option 2: From URL (using sample data)\nurl = \"https://raw.githubusercontent.com/altcoder/philippines-json-maps/master/geojson/provinces/hires/BOHOL.json\"\nsample_province = gpd.read_file(url)\n\n# For this example, let's use the sample\ngdf = sample_province\nprint(\"Loaded successfully! ✓\")\n```\n\n::: {.philippine-context}\n**Philippine Geospatial Data Sources:**\n\n- **NAMRIA Geoportal:** Official administrative boundaries\n- **PhilGIS:** Open-source Philippine GIS data\n- **GADM:** Global administrative boundaries\n- **OpenStreetMap:** Roads, buildings, POIs\n\nDownload shapefiles and upload to your Google Drive for this session.\n:::\n\n### Inspecting a GeoDataFrame\n\n**View first rows:**\n\n```python\ngdf.head()\n```\n\nThis shows:\n- Attribute columns (NAME, PROVINCE, REGION, etc.)\n- **geometry column:** The shapes themselves (Polygon or MultiPolygon)\n\n**Check coordinate reference system:**\n\n```python\nprint(\"CRS:\", gdf.crs)\n```\n\n**Common CRS values:**\n- `EPSG:4326` - WGS84 latitude/longitude (geographic)\n- `EPSG:32651` - UTM Zone 51N (projected, meters)\n- `EPSG:3123` - PRS92 Philippines Zone III\n\n**Get basic info:**\n\n```python\nprint(f\"Number of features: {len(gdf)}\")\nprint(f\"Geometry type: {gdf.geometry.type[0]}\")\nprint(f\"Bounds: {gdf.total_bounds}\")  # [minx, miny, maxx, maxy]\nprint(f\"\\nColumns: {list(gdf.columns)}\")\n```\n\n**Summary statistics:**\n\n```python\ngdf.info()\n```\n\n### Filtering and Querying\n\n**Filter by attribute:**\n\n```python\n# If using multi-province dataset:\n# luzon_provinces = gdf[gdf['ISLAND'] == 'LUZON']\n\n# Filter by area (if area column exists)\n# large_provinces = gdf[gdf['AREA_KM2'] > 5000]\n\n# Example: Select specific province by name\ntarget = gdf[gdf['NAME'].str.contains('Bohol', case=False)]\nprint(f\"Selected: {target['NAME'].values}\")\n```\n\n**Spatial filtering:**\n\n```python\n# Check if geometries are valid\nprint(f\"Valid geometries: {gdf.geometry.is_valid.all()}\")\n\n# Calculate centroids\ngdf['centroid'] = gdf.geometry.centroid\nprint(f\"Centroid of first feature: {gdf['centroid'].iloc[0]}\")\n\n# Calculate area (will be in units of CRS - degrees for EPSG:4326)\ngdf['area'] = gdf.geometry.area\nprint(f\"Areas: {gdf['area'].head()}\")\n```\n\n::: {.callout-tip}\n## Working with CRS\n\n**To project to meters for accurate area calculation:**\n\n```python\n# Reproject to UTM Zone 51N (appropriate for Philippines)\ngdf_utm = gdf.to_crs('EPSG:32651')\ngdf_utm['area_km2'] = gdf_utm.geometry.area / 1_000_000  # Convert m² to km²\nprint(f\"Province area: {gdf_utm['area_km2'].iloc[0]:.2f} km²\")\n```\n:::\n\n### Visualizing Vector Data\n\n**Simple plot:**\n\n```python\ngdf.plot(figsize=(8, 8), edgecolor='black', facecolor='lightblue')\nplt.title(\"Bohol Province, Philippines\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.show()\n```\n\n**Styled plot with colors:**\n\n```python\n# If you have multiple provinces with a classification column:\n# gdf.plot(column='REGION', legend=True, figsize=(10, 10),\n#          cmap='Set3', edgecolor='black', linewidth=0.5)\n# plt.title(\"Philippines Provinces by Region\")\n\n# For single feature, style it:\nfig, ax = plt.subplots(figsize=(10, 10))\ngdf.plot(ax=ax, facecolor='#90EE90', edgecolor='darkgreen', linewidth=2, alpha=0.7)\ngdf['centroid'].plot(ax=ax, color='red', markersize=50)\nplt.title(\"Bohol Province with Centroid\", fontsize=16)\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n**Interactive exploration:**\n\n```python\n# Display attribute table interactively\ngdf[['NAME', 'geometry']]\n```\n\n### Example: Create Area of Interest (AOI)\n\n```python\n# Create a simple polygon AOI (example coordinates)\nfrom shapely.geometry import Polygon\n\n# Bounding box coordinates (minx, miny, maxx, maxy)\naoi_coords = [\n    (123.5, 9.5),   # Southwest corner\n    (125.0, 9.5),   # Southeast corner\n    (125.0, 11.0),  # Northeast corner\n    (123.5, 11.0),  # Northwest corner\n    (123.5, 9.5)    # Close polygon\n]\n\naoi_polygon = Polygon(aoi_coords)\naoi_gdf = gpd.GeoDataFrame([1], geometry=[aoi_polygon], crs='EPSG:4326')\naoi_gdf.columns = ['id', 'geometry']\n\n# Visualize AOI with province\nfig, ax = plt.subplots(figsize=(10, 8))\ngdf.plot(ax=ax, facecolor='lightgray', edgecolor='black')\naoi_gdf.plot(ax=ax, facecolor='none', edgecolor='red', linewidth=3)\nplt.title(\"Province with Area of Interest (Red Box)\")\nplt.show()\n\nprint(\"AOI created successfully! ✓\")\n```\n\n---\n\n## Part 5: Raster Data with Rasterio\n\n### What is Raster Data?\n\n**Raster data is a grid of pixels (cells), each with a value:**\n\n- **Satellite imagery:** Each pixel = reflectance values\n- **DEMs:** Each pixel = elevation\n- **Temperature maps:** Each pixel = temperature value\n\n**Common formats:** GeoTIFF (.tif), NetCDF (.nc), HDF (.hdf)\n\n**Raster structure:**\n\n```\n┌─────┬─────┬─────┬─────┐\n│ 120 │ 130 │ 125 │ 118 │  ← Row 1\n├─────┼─────┼─────┼─────┤\n│ 115 │ 140 │ 135 │ 122 │  ← Row 2\n├─────┼─────┼─────┼─────┤\n│ 110 │ 125 │ 130 │ 119 │  ← Row 3\n└─────┴─────┴─────┴─────┘\n  Col1  Col2  Col3  Col4\n```\n\nEach cell has:\n- **Value:** Reflectance, elevation, class, etc.\n- **Location:** Defined by geotransform + CRS\n- **Size:** Spatial resolution (e.g., 10m)\n\n### Opening a Raster File\n\n**Example: Sentinel-2 imagery subset**\n\n```python\n# Sample raster path (adjust to your data)\nraster_path = '/content/drive/MyDrive/CopPhil_Training/data/raster/sentinel2_bohol_subset.tif'\n\n# For demonstration, we'll create sample raster metadata\n# In real workflow, you'd open your actual Sentinel-2 file\n\n# Open raster\nsrc = rasterio.open(raster_path)\n\n# View metadata\nprint(\"Raster Metadata:\")\nprint(f\"  Width (pixels): {src.width}\")\nprint(f\"  Height (pixels): {src.height}\")\nprint(f\"  Number of bands: {src.count}\")\nprint(f\"  Data type: {src.dtypes[0]}\")\nprint(f\"  CRS: {src.crs}\")\nprint(f\"  Bounds: {src.bounds}\")\nprint(f\"  Resolution: {src.res}\")  # (x_res, y_res) in CRS units\nprint(f\"  Nodata value: {src.nodata}\")\n\nsrc.close()\n```\n\n::: {.callout-note}\n## Raster Metadata Explanation\n\n**For a Sentinel-2 10m band over Bohol:**\n\n- **Width/Height:** 5000 x 5000 pixels → 50km x 50km area\n- **Bands:** 4 (Blue, Green, Red, NIR if subset)\n- **Data type:** uint16 (0-65535 range)\n- **CRS:** EPSG:32651 (UTM Zone 51N)\n- **Resolution:** (10.0, -10.0) meters (negative y = north-up)\n- **Nodata:** 0 or 65535 (no valid data)\n:::\n\n**Better pattern: Context manager (auto-closes file)**\n\n```python\nwith rasterio.open(raster_path) as src:\n    print(f\"Opened: {src.name}\")\n    print(f\"Bands: {src.count}\")\n    # Work with src here\n# File automatically closed after 'with' block\n```\n\n### Reading Raster Data into Arrays\n\n**Read a single band:**\n\n```python\nwith rasterio.open(raster_path) as src:\n    # Read band 1 (Rasterio uses 1-indexing for bands)\n    band1 = src.read(1)\n\nprint(f\"Band 1 shape: {band1.shape}\")  # (height, width)\nprint(f\"Data type: {band1.dtype}\")\nprint(f\"Min value: {band1.min()}, Max value: {band1.max()}\")\nprint(f\"Mean value: {band1.mean():.2f}\")\n```\n\n**Read multiple bands:**\n\n```python\nwith rasterio.open(raster_path) as src:\n    # Read all bands as 3D array (bands, height, width)\n    all_bands = src.read()\n\n    # Or read specific bands\n    blue = src.read(1)   # Band 1: Blue\n    green = src.read(2)  # Band 2: Green\n    red = src.read(3)    # Band 3: Red\n    nir = src.read(4)    # Band 4: NIR\n\nprint(f\"All bands shape: {all_bands.shape}\")  # (4, height, width)\n```\n\n**For Sentinel-2, typical band order in L2A products:**\n\n| Band # | Wavelength | Name | Resolution |\n|--------|------------|------|------------|\n| 1 | 490 nm | Blue (B2) | 10m |\n| 2 | 560 nm | Green (B3) | 10m |\n| 3 | 665 nm | Red (B4) | 10m |\n| 4 | 842 nm | NIR (B8) | 10m |\n\n### Calculating Spectral Indices\n\n#### NDVI (Normalized Difference Vegetation Index)\n\n```python\nwith rasterio.open(raster_path) as src:\n    red = src.read(3).astype(float)\n    nir = src.read(4).astype(float)\n\n# Calculate NDVI\n# NDVI = (NIR - Red) / (NIR + Red)\nndvi = (nir - red) / (nir + red + 1e-10)  # Small value prevents division by zero\n\nprint(f\"NDVI range: {ndvi.min():.3f} to {ndvi.max():.3f}\")\nprint(f\"NDVI mean: {ndvi.mean():.3f}\")\n\n# Visualize NDVI\nplt.figure(figsize=(10, 8))\nplt.imshow(ndvi, cmap='RdYlGn', vmin=-1, vmax=1)\nplt.colorbar(label='NDVI', shrink=0.8)\nplt.title(\"NDVI - Vegetation Index\")\nplt.xlabel(\"Column (pixels)\")\nplt.ylabel(\"Row (pixels)\")\nplt.show()\n```\n\n**NDVI interpretation:**\n\n- **<0:** Water, clouds, snow\n- **0-0.2:** Bare soil, rock, sand, urban\n- **0.2-0.4:** Sparse vegetation, grassland\n- **0.4-0.7:** Moderate vegetation, cropland\n- **>0.7:** Dense vegetation, healthy forest\n\n::: {.philippine-context}\n**Philippine Application: Rice Paddy Monitoring**\n\n```python\n# Identify rice paddies (moderate-high NDVI during growing season)\nrice_mask = (ndvi > 0.5) & (ndvi < 0.85)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(rice_mask, cmap='Greens')\nplt.title(\"Potential Rice Paddies (NDVI 0.5-0.85)\")\nplt.colorbar()\nplt.show()\n\nrice_pixels = rice_mask.sum()\ntotal_pixels = rice_mask.size\nprint(f\"Potential rice paddies: {rice_pixels:,} pixels ({rice_pixels/total_pixels*100:.1f}%)\")\n```\n:::\n\n#### NDWI (Normalized Difference Water Index)\n\n```python\nwith rasterio.open(raster_path) as src:\n    green = src.read(2).astype(float)\n    nir = src.read(4).astype(float)\n\n# NDWI = (Green - NIR) / (Green + NIR)\nndwi = (green - nir) / (green + nir + 1e-10)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(ndwi, cmap='Blues', vmin=-1, vmax=1)\nplt.colorbar(label='NDWI', shrink=0.8)\nplt.title(\"NDWI - Water Index\")\nplt.show()\n\n# Extract water bodies (NDWI > 0.3)\nwater_mask = ndwi > 0.3\nprint(f\"Water pixels: {water_mask.sum():,}\")\n```\n\n### Creating RGB Composites\n\n**True color composite (Red, Green, Blue):**\n\n```python\nwith rasterio.open(raster_path) as src:\n    red = src.read(3)\n    green = src.read(2)\n    blue = src.read(1)\n\n# Stack bands into RGB array\nrgb = np.stack([red, green, blue], axis=2)\n\n# Scale to 0-1 range for display (Sentinel-2 L2A is 0-10000)\nrgb_scaled = rgb.astype(float) / 10000.0\nrgb_scaled = np.clip(rgb_scaled, 0, 1)  # Clip any values outside 0-1\n\n# Enhance contrast (optional)\nfrom skimage import exposure\nrgb_enhanced = exposure.rescale_intensity(rgb_scaled, in_range=(0.0, 0.3), out_range=(0, 1))\n\n# Display\nplt.figure(figsize=(12, 10))\nplt.imshow(rgb_enhanced)\nplt.title(\"True Color Composite (Red-Green-Blue)\")\nplt.axis('off')\nplt.show()\n```\n\n**False color composite (NIR, Red, Green) - highlights vegetation:**\n\n```python\nwith rasterio.open(raster_path) as src:\n    nir = src.read(4)\n    red = src.read(3)\n    green = src.read(2)\n\n# NIR-R-G composite\nfalse_color = np.stack([nir, red, green], axis=2)\nfalse_color_scaled = false_color.astype(float) / 10000.0\nfalse_color_scaled = np.clip(false_color_scaled, 0, 1)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(false_color_scaled)\nplt.title(\"False Color Composite (NIR-Red-Green) - Vegetation appears red\")\nplt.axis('off')\nplt.show()\n```\n\n**Why false color?**\n\n- **Vegetation:** Appears bright red (high NIR reflectance)\n- **Water:** Appears dark blue/black (absorbs NIR)\n- **Urban:** Appears cyan/gray\n- **Bare soil:** Appears brown/tan\n\nEasier to distinguish land cover types!\n\n---\n\n## Part 6: Combining Vector and Raster Operations\n\n### Clipping Raster to Vector Boundary\n\n**Extract raster data only within AOI polygon:**\n\n```python\nfrom rasterio.mask import mask\n\n# Load AOI polygon (from earlier GeoPandas section)\n# aoi_gdf = ...\n\nwith rasterio.open(raster_path) as src:\n    # Ensure CRS match\n    if aoi_gdf.crs != src.crs:\n        aoi_gdf = aoi_gdf.to_crs(src.crs)\n\n    # Get geometries in proper format\n    shapes = aoi_gdf.geometry.values\n\n    # Clip raster\n    out_image, out_transform = mask(src, shapes, crop=True)\n    out_meta = src.meta.copy()\n\n# Update metadata for clipped raster\nout_meta.update({\n    \"driver\": \"GTiff\",\n    \"height\": out_image.shape[1],\n    \"width\": out_image.shape[2],\n    \"transform\": out_transform\n})\n\nprint(f\"Original raster: {src.width} x {src.height}\")\nprint(f\"Clipped raster: {out_meta['width']} x {out_meta['height']}\")\n\n# Visualize clipped area\nfig, axes = plt.subplots(1, 2, figsize=(16, 6))\n\n# Original\naxes[0].imshow(src.read(3), cmap='gray')\naxes[0].set_title(\"Original Raster\")\n\n# Clipped\naxes[1].imshow(out_image[2], cmap='gray')  # Band 3 (Red)\naxes[1].set_title(\"Clipped to AOI\")\n\nplt.tight_layout()\nplt.show()\n```\n\n**Save clipped raster:**\n\n```python\noutput_path = '/content/drive/MyDrive/CopPhil_Training/outputs/clipped_raster.tif'\n\nwith rasterio.open(output_path, 'w', **out_meta) as dest:\n    dest.write(out_image)\n\nprint(f\"✓ Saved clipped raster to: {output_path}\")\n```\n\n### Sampling Raster Values at Point Locations\n\n**Extract pixel values at specific coordinates:**\n\n```python\n# Example: Field survey locations\nsurvey_points = gpd.GeoDataFrame({\n    'site_id': ['Site_A', 'Site_B', 'Site_C'],\n    'geometry': gpd.points_from_xy([124.0, 124.5, 123.8], [10.0, 10.3, 9.8])\n}, crs='EPSG:4326')\n\n# Sample raster at points\nwith rasterio.open(raster_path) as src:\n    # Reproject points if needed\n    if survey_points.crs != src.crs:\n        survey_points = survey_points.to_crs(src.crs)\n\n    # Extract coordinates\n    coords = [(x, y) for x, y in zip(survey_points.geometry.x, survey_points.geometry.y)]\n\n    # Sample all bands\n    sampled_values = [x for x in src.sample(coords)]\n\n# Add to GeoDataFrame\nsurvey_points['blue'] = [v[0] for v in sampled_values]\nsurvey_points['green'] = [v[1] for v in sampled_values]\nsurvey_points['red'] = [v[2] for v in sampled_values]\nsurvey_points['nir'] = [v[3] for v in sampled_values]\n\n# Calculate NDVI at points\nsurvey_points['ndvi'] = (survey_points['nir'] - survey_points['red']) / \\\n                        (survey_points['nir'] + survey_points['red'])\n\nprint(survey_points[['site_id', 'ndvi']])\n```\n\n---\n\n## Part 7: Complete Workflow Example\n\n### Scenario: Forest Health Assessment in Philippine Protected Area\n\n**Goal:** Identify potential forest stress areas using Sentinel-2 NDVI\n\n```python\n# 1. Load protected area boundary\n# (Replace with actual protected area shapefile)\nprotected_area = aoi_gdf  # Using our AOI from earlier\n\n# 2. Load Sentinel-2 imagery\nwith rasterio.open(raster_path) as src:\n    # 3. Clip to protected area\n    if protected_area.crs != src.crs:\n        protected_area = protected_area.to_crs(src.crs)\n\n    shapes = protected_area.geometry.values\n    out_image, out_transform = mask(src, shapes, crop=True)\n\n    # Extract bands\n    red = out_image[2].astype(float)\n    nir = out_image[3].astype(float)\n\n# 4. Calculate NDVI\nndvi = (nir - red) / (nir + red + 1e-10)\n\n# 5. Identify stress areas (low NDVI where forest expected)\n# Assumption: Protected area should be >0.6 NDVI (healthy forest)\nstress_threshold = 0.5\nstress_mask = (ndvi < stress_threshold) & (ndvi > 0.1)  # Exclude water/bare\n\n# 6. Visualize results\nfig, axes = plt.subplots(1, 3, figsize=(18, 6))\n\n# True color\nrgb_display = np.stack([red, green, blue], axis=2) / 10000.0\nrgb_display = np.clip(rgb_display, 0, 0.3) / 0.3  # Contrast stretch\naxes[0].imshow(rgb_display)\naxes[0].set_title(\"True Color\")\naxes[0].axis('off')\n\n# NDVI\nim1 = axes[1].imshow(ndvi, cmap='RdYlGn', vmin=0, vmax=1)\naxes[1].set_title(\"NDVI\")\naxes[1].axis('off')\nplt.colorbar(im1, ax=axes[1], shrink=0.8)\n\n# Stress areas\naxes[2].imshow(stress_mask, cmap='Reds')\naxes[2].set_title(f\"Potential Stress Areas (NDVI < {stress_threshold})\")\naxes[2].axis('off')\n\nplt.tight_layout()\nplt.show()\n\n# 7. Statistics\ntotal_pixels = ndvi.size\nstress_pixels = stress_mask.sum()\narea_m2 = stress_pixels * 100  # 10m resolution → 100 m² per pixel\narea_ha = area_m2 / 10000\n\nprint(\"=\" * 50)\nprint(\"FOREST HEALTH ASSESSMENT RESULTS\")\nprint(\"=\" * 50)\nprint(f\"Protected Area: {protected_area['id'].values[0]}\")\nprint(f\"Average NDVI: {ndvi.mean():.3f}\")\nprint(f\"Stress pixels: {stress_pixels:,} ({stress_pixels/total_pixels*100:.1f}%)\")\nprint(f\"Stress area: {area_ha:.1f} hectares\")\nprint(\"=\" * 50)\n```\n\n---\n\n## Key Takeaways\n\n::: {.callout-important}\n## Session 3 Summary\n\n**Google Colab:**\n- Cloud-based Python environment, no installation needed\n- Mount Google Drive for data access\n- Install geospatial libraries: `!pip install geopandas rasterio`\n\n**GeoPandas (Vector Data):**\n- Read shapefiles/GeoJSON: `gpd.read_file()`\n- Filter by attributes: `gdf[gdf['column'] == value]`\n- Visualize: `gdf.plot()`\n- Check/transform CRS: `gdf.crs`, `gdf.to_crs()`\n\n**Rasterio (Raster Data):**\n- Open rasters: `rasterio.open(path)`\n- Read bands: `src.read(band_number)`\n- Arrays are NumPy: all array operations work\n- Calculate indices: NDVI = `(NIR - Red) / (NIR + Red)`\n\n**Combining Vector + Raster:**\n- Clip rasters: `rasterio.mask.mask(src, shapes, crop=True)`\n- Sample at points: `src.sample(coordinates)`\n- Match CRS before spatial operations!\n\n**Next:** Session 4 will leverage Google Earth Engine to access petabytes of Sentinel data without downloading!\n:::\n\n---\n\n## Practice Exercises\n\n::: {.callout-tip}\n## Try These Challenges\n\n**Exercise 1: Load Your Own Boundary**\n\nDownload a shapefile of your province from NAMRIA Geoportal and visualize it in Colab.\n\n**Exercise 2: Calculate NDWI**\n\nModify the NDVI code to calculate NDWI and identify water bodies in the imagery.\n\n**Exercise 3: Multi-temporal NDVI**\n\nIf you have two Sentinel-2 images (dry season, wet season), calculate NDVI for both and create a change map.\n\n**Exercise 4: Zonal Statistics**\n\nCalculate average NDVI for each municipality using `rasterstats` library.\n\n**Bonus: RGB Composite from GEE Export**\n\nExport a Sentinel-2 composite from Google Earth Engine (Session 4) and visualize it using today's techniques!\n:::\n\n---\n\n## Further Reading\n\n### GeoPandas\n- [Official Documentation](https://geopandas.org/)\n- [GeoPandas Tutorial (DataCamp)](https://www.datacamp.com/tutorial/geopandas-tutorial-geospatial-analysis)\n- [GeoPandas Examples Gallery](https://geopandas.org/en/stable/gallery/index.html)\n\n### Rasterio\n- [Official Documentation](https://rasterio.readthedocs.io/)\n- [Rasterio Quickstart](https://rasterio.readthedocs.io/en/stable/quickstart.html)\n- [Python Raster Tutorial (WUR)](https://geoscripting-wur.github.io/PythonRaster/)\n\n### Combined Workflows\n- [Carpentries Geospatial Python](https://carpentries-incubator.github.io/geospatial-python/)\n- [Cropping Rasters with Vector Boundaries](https://rasterio.readthedocs.io/en/stable/topics/masking-by-shapefile.html)\n\n---\n\n## Jupyter Notebook\n\n::: {.callout-note}\n## Access the Interactive Notebook\n\nA complete Jupyter notebook with all code examples from this session is available:\n\n**[Open Notebook 1: Python Geospatial Data →](../notebooks/notebook1.qmd)**\n\nThis notebook includes:\n- All code examples ready to run\n- Additional exercises\n- Sample datasets\n- Detailed comments and explanations\n:::\n\n---\n\n::: {.session-nav}\n::: {.session-nav-link href=\"session2.qmd\"}\n::: {.session-nav-label}\n← Previous\n:::\n::: {.session-nav-title}\nSession 2: AI/ML Fundamentals\n:::\n:::\n::: {.session-nav-link href=\"session4.qmd\"}\n::: {.session-nav-label}\nNext Session\n:::\n::: {.session-nav-title}\nSession 4: Google Earth Engine →\n:::\n:::\n:::\n","srcMarkdownNoYaml":"\n\n::: {.session-info}\n**Duration:** 2 hours | **Format:** Hands-on Coding | **Platform:** Google Colaboratory\n:::\n\n## Session Overview\n\nThis hands-on session teaches you how to work with geospatial data in Python - the foundation of Earth Observation workflows. You'll use Google Colab (no installation needed!), learn vector data operations with GeoPandas, and master raster processing with Rasterio. By the end, you'll be able to load Philippine administrative boundaries, visualize them, read Sentinel-2 imagery, calculate NDVI, and combine vector and raster operations.\n\n::: {.learning-objectives}\n### Learning Objectives\n\nBy the end of this session, you will be able to:\n\n- **Set up** Google Colaboratory for geospatial analysis\n- **Mount** Google Drive for data access and storage\n- **Install** Python geospatial libraries (GeoPandas, Rasterio)\n- **Read and inspect** vector data (shapefiles, GeoJSON)\n- **Query and filter** geospatial DataFrames\n- **Visualize** vector data with maps\n- **Open and examine** raster files and their metadata\n- **Read** raster bands into NumPy arrays\n- **Calculate** spectral indices (NDVI, NDWI)\n- **Create** RGB composites from multispectral imagery\n- **Clip** rasters to vector boundaries\n- **Combine** vector and raster operations for analysis\n:::\n\n---\n\n## Part 1: Setting Up Google Colaboratory\n\n### What is Google Colab?\n\n**Google Colaboratory (Colab)** is a free cloud-based Jupyter notebook environment that allows you to:\n\n- Write and execute Python code in your browser\n- Access free GPU/TPU for machine learning\n- Collaborate with others in real-time\n- Save notebooks to Google Drive\n- No local installation required!\n\n**Perfect for this training:** Everyone has the same environment, no dependency issues, accessible from anywhere.\n\n### Creating Your First Colab Notebook\n\n::: {.callout-note}\n## Access Colab\n\n**URL:** [https://colab.research.google.com](https://colab.research.google.com)\n\n**Requirements:**\n- Google account\n- Modern web browser (Chrome, Firefox, Safari, Edge)\n- Stable internet connection\n:::\n\n**Steps:**\n\n1. Go to colab.research.google.com\n2. Sign in with your Google account\n3. Click **File → New Notebook**\n4. Rename: **File → Rename** → \"Day1_Session3_Geospatial_Python\"\n\n### Understanding the Colab Interface\n\n**Key components:**\n\n- **Code cells:** Where you write Python code (click or press Enter to edit)\n- **Text cells:** Markdown for documentation (Insert → Text cell)\n- **Run button:** ▶ Execute current cell (or press Shift+Enter)\n- **Runtime menu:** Manage execution environment\n- **Table of Contents:** Navigate long notebooks (left sidebar icon)\n\n**Try it:** Create a code cell and run:\n\n```python\nprint(\"Hello from Google Colab!\")\nprint(\"This is the CopPhil EO AI/ML Training\")\n```\n\nPress **Shift+Enter** to execute. You should see the output below the cell.\n\n### Connecting Google Drive\n\n**Why mount Google Drive?**\n\n- Access data files stored in Drive\n- Save outputs permanently\n- Share data with collaborators\n\n**Mount Drive:**\n\n```python\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n**What happens:**\n\n1. Click the link that appears\n2. Select your Google account\n3. Click \"Allow\" to grant access\n4. Copy the authorization code\n5. Paste into the input field and press Enter\n\n**Verification:**\n\n```python\nimport os\nos.listdir('/content/drive/MyDrive')\n```\n\nYou should see your Google Drive folders listed!\n\n::: {.callout-tip}\n## Organizing Your Data\n\nCreate a folder structure in Google Drive:\n\n```\nMyDrive/\n  CopPhil_Training/\n    data/\n      vector/          # Shapefiles, GeoJSON\n      raster/          # Satellite imagery\n    outputs/           # Processed results\n    notebooks/         # Saved Colab notebooks\n```\n\nThis keeps your training materials organized.\n:::\n\n---\n\n## Part 2: Installing Geospatial Libraries\n\n### Required Libraries\n\nGoogle Colab comes with many libraries pre-installed, but specialized geospatial tools need installation.\n\n**Core libraries we'll use:**\n\n| Library | Purpose |\n|---------|---------|\n| **GeoPandas** | Vector data (shapefiles, GeoJSON, polygons, points) |\n| **Rasterio** | Raster data (GeoTIFF, satellite imagery) |\n| **Shapely** | Geometric operations (included with GeoPandas) |\n| **Matplotlib** | Visualization |\n| **NumPy** | Array operations (pre-installed) |\n\n### Installation\n\nRun this cell (may take 1-2 minutes):\n\n```python\n# Install geospatial libraries\n!pip install geopandas rasterio fiona shapely pyproj -q\n\nprint(\"Installation complete! ✓\")\n```\n\nThe `-q` flag makes installation quiet (less output).\n\n**If you see warnings:** Usually safe to ignore. If errors occur, try:\n\n```python\n!pip install --upgrade geopandas rasterio\n```\n\n### Verify Installation\n\n```python\nimport geopandas as gpd\nimport rasterio\nfrom rasterio.plot import show\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nprint(\"✓ GeoPandas version:\", gpd.__version__)\nprint(\"✓ Rasterio version:\", rasterio.__version__)\nprint(\"✓ All libraries imported successfully!\")\n```\n\n::: {.callout-warning}\n## Runtime Restart\n\nOccasionally, Colab may ask you to restart the runtime after installing libraries:\n\n**Runtime → Restart runtime**\n\nThen re-run your import cell. This is normal!\n:::\n\n---\n\n## Part 3: Python Basics Refresher\n\nQuick recap of Python essentials for geospatial work:\n\n### Data Types\n\n```python\n# Numbers\npopulation = 1780148        # Integer\narea_km2 = 42.88           # Float\n\n# Strings\ncity = \"Manila\"\nprovince = \"Metro Manila\"\n\n# Lists (ordered collections)\nregions = [\"Luzon\", \"Visayas\", \"Mindanao\"]\ncoordinates = [14.5995, 120.9842]  # [latitude, longitude]\n\n# Dictionaries (key-value pairs)\nlocation_info = {\n    \"city\": \"Quezon City\",\n    \"population\": 2960048,\n    \"region\": \"NCR\"\n}\n\nprint(f\"{city} has population {population:,}\")\nprint(f\"Regions: {regions}\")\nprint(f\"Coordinates: {coordinates}\")\n```\n\n### Control Structures\n\n```python\n# If statements\ncloud_cover = 15\n\nif cloud_cover < 10:\n    quality = \"Excellent\"\nelif cloud_cover < 30:\n    quality = \"Good\"\nelse:\n    quality = \"Poor\"\n\nprint(f\"Cloud cover {cloud_cover}%: {quality} for optical imagery\")\n\n# For loops\nprovinces = [\"Palawan\", \"Zambales\", \"Quezon\"]\nfor province in provinces:\n    print(f\"Processing {province}...\")\n\n# List comprehension (Pythonic way)\nprovince_lengths = [len(p) for p in provinces]\nprint(\"Province name lengths:\", province_lengths)\n```\n\n### Functions\n\n```python\ndef calculate_ndvi(nir, red):\n    \"\"\"Calculate Normalized Difference Vegetation Index.\"\"\"\n    ndvi = (nir - red) / (nir + red + 1e-10)  # Add small value to avoid division by zero\n    return ndvi\n\n# Example usage\nnir_value = 0.8\nred_value = 0.2\nresult = calculate_ndvi(nir_value, red_value)\nprint(f\"NDVI: {result:.3f}\")\n```\n\n**Key Python concepts for geospatial:**\n\n- **Indentation matters:** Use 4 spaces to define code blocks\n- **0-indexed:** First element is `list[0]`, not `list[1]`\n- **Method chaining:** `gdf.filter(...).plot()`\n- **Context managers:** `with rasterio.open() as src:` (auto-cleanup)\n\n---\n\n## Part 4: Vector Data with GeoPandas\n\n### What is Vector Data?\n\n**Vector data represents discrete features:**\n\n- **Points:** Cities, field sites, observation locations\n- **Lines:** Roads, rivers, transects\n- **Polygons:** Administrative boundaries, land parcels, watersheds\n\n**Common formats:** Shapefile (.shp), GeoJSON, KML, GeoPackage\n\n### Loading Philippine Administrative Boundaries\n\nLet's load provincial boundaries of the Philippines:\n\n```python\n# Option 1: From Google Drive (if you uploaded data)\nprovinces = gpd.read_file('/content/drive/MyDrive/CopPhil_Training/data/vector/philippines_provinces.shp')\n\n# Option 2: From URL (using sample data)\nurl = \"https://raw.githubusercontent.com/altcoder/philippines-json-maps/master/geojson/provinces/hires/BOHOL.json\"\nsample_province = gpd.read_file(url)\n\n# For this example, let's use the sample\ngdf = sample_province\nprint(\"Loaded successfully! ✓\")\n```\n\n::: {.philippine-context}\n**Philippine Geospatial Data Sources:**\n\n- **NAMRIA Geoportal:** Official administrative boundaries\n- **PhilGIS:** Open-source Philippine GIS data\n- **GADM:** Global administrative boundaries\n- **OpenStreetMap:** Roads, buildings, POIs\n\nDownload shapefiles and upload to your Google Drive for this session.\n:::\n\n### Inspecting a GeoDataFrame\n\n**View first rows:**\n\n```python\ngdf.head()\n```\n\nThis shows:\n- Attribute columns (NAME, PROVINCE, REGION, etc.)\n- **geometry column:** The shapes themselves (Polygon or MultiPolygon)\n\n**Check coordinate reference system:**\n\n```python\nprint(\"CRS:\", gdf.crs)\n```\n\n**Common CRS values:**\n- `EPSG:4326` - WGS84 latitude/longitude (geographic)\n- `EPSG:32651` - UTM Zone 51N (projected, meters)\n- `EPSG:3123` - PRS92 Philippines Zone III\n\n**Get basic info:**\n\n```python\nprint(f\"Number of features: {len(gdf)}\")\nprint(f\"Geometry type: {gdf.geometry.type[0]}\")\nprint(f\"Bounds: {gdf.total_bounds}\")  # [minx, miny, maxx, maxy]\nprint(f\"\\nColumns: {list(gdf.columns)}\")\n```\n\n**Summary statistics:**\n\n```python\ngdf.info()\n```\n\n### Filtering and Querying\n\n**Filter by attribute:**\n\n```python\n# If using multi-province dataset:\n# luzon_provinces = gdf[gdf['ISLAND'] == 'LUZON']\n\n# Filter by area (if area column exists)\n# large_provinces = gdf[gdf['AREA_KM2'] > 5000]\n\n# Example: Select specific province by name\ntarget = gdf[gdf['NAME'].str.contains('Bohol', case=False)]\nprint(f\"Selected: {target['NAME'].values}\")\n```\n\n**Spatial filtering:**\n\n```python\n# Check if geometries are valid\nprint(f\"Valid geometries: {gdf.geometry.is_valid.all()}\")\n\n# Calculate centroids\ngdf['centroid'] = gdf.geometry.centroid\nprint(f\"Centroid of first feature: {gdf['centroid'].iloc[0]}\")\n\n# Calculate area (will be in units of CRS - degrees for EPSG:4326)\ngdf['area'] = gdf.geometry.area\nprint(f\"Areas: {gdf['area'].head()}\")\n```\n\n::: {.callout-tip}\n## Working with CRS\n\n**To project to meters for accurate area calculation:**\n\n```python\n# Reproject to UTM Zone 51N (appropriate for Philippines)\ngdf_utm = gdf.to_crs('EPSG:32651')\ngdf_utm['area_km2'] = gdf_utm.geometry.area / 1_000_000  # Convert m² to km²\nprint(f\"Province area: {gdf_utm['area_km2'].iloc[0]:.2f} km²\")\n```\n:::\n\n### Visualizing Vector Data\n\n**Simple plot:**\n\n```python\ngdf.plot(figsize=(8, 8), edgecolor='black', facecolor='lightblue')\nplt.title(\"Bohol Province, Philippines\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.show()\n```\n\n**Styled plot with colors:**\n\n```python\n# If you have multiple provinces with a classification column:\n# gdf.plot(column='REGION', legend=True, figsize=(10, 10),\n#          cmap='Set3', edgecolor='black', linewidth=0.5)\n# plt.title(\"Philippines Provinces by Region\")\n\n# For single feature, style it:\nfig, ax = plt.subplots(figsize=(10, 10))\ngdf.plot(ax=ax, facecolor='#90EE90', edgecolor='darkgreen', linewidth=2, alpha=0.7)\ngdf['centroid'].plot(ax=ax, color='red', markersize=50)\nplt.title(\"Bohol Province with Centroid\", fontsize=16)\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n**Interactive exploration:**\n\n```python\n# Display attribute table interactively\ngdf[['NAME', 'geometry']]\n```\n\n### Example: Create Area of Interest (AOI)\n\n```python\n# Create a simple polygon AOI (example coordinates)\nfrom shapely.geometry import Polygon\n\n# Bounding box coordinates (minx, miny, maxx, maxy)\naoi_coords = [\n    (123.5, 9.5),   # Southwest corner\n    (125.0, 9.5),   # Southeast corner\n    (125.0, 11.0),  # Northeast corner\n    (123.5, 11.0),  # Northwest corner\n    (123.5, 9.5)    # Close polygon\n]\n\naoi_polygon = Polygon(aoi_coords)\naoi_gdf = gpd.GeoDataFrame([1], geometry=[aoi_polygon], crs='EPSG:4326')\naoi_gdf.columns = ['id', 'geometry']\n\n# Visualize AOI with province\nfig, ax = plt.subplots(figsize=(10, 8))\ngdf.plot(ax=ax, facecolor='lightgray', edgecolor='black')\naoi_gdf.plot(ax=ax, facecolor='none', edgecolor='red', linewidth=3)\nplt.title(\"Province with Area of Interest (Red Box)\")\nplt.show()\n\nprint(\"AOI created successfully! ✓\")\n```\n\n---\n\n## Part 5: Raster Data with Rasterio\n\n### What is Raster Data?\n\n**Raster data is a grid of pixels (cells), each with a value:**\n\n- **Satellite imagery:** Each pixel = reflectance values\n- **DEMs:** Each pixel = elevation\n- **Temperature maps:** Each pixel = temperature value\n\n**Common formats:** GeoTIFF (.tif), NetCDF (.nc), HDF (.hdf)\n\n**Raster structure:**\n\n```\n┌─────┬─────┬─────┬─────┐\n│ 120 │ 130 │ 125 │ 118 │  ← Row 1\n├─────┼─────┼─────┼─────┤\n│ 115 │ 140 │ 135 │ 122 │  ← Row 2\n├─────┼─────┼─────┼─────┤\n│ 110 │ 125 │ 130 │ 119 │  ← Row 3\n└─────┴─────┴─────┴─────┘\n  Col1  Col2  Col3  Col4\n```\n\nEach cell has:\n- **Value:** Reflectance, elevation, class, etc.\n- **Location:** Defined by geotransform + CRS\n- **Size:** Spatial resolution (e.g., 10m)\n\n### Opening a Raster File\n\n**Example: Sentinel-2 imagery subset**\n\n```python\n# Sample raster path (adjust to your data)\nraster_path = '/content/drive/MyDrive/CopPhil_Training/data/raster/sentinel2_bohol_subset.tif'\n\n# For demonstration, we'll create sample raster metadata\n# In real workflow, you'd open your actual Sentinel-2 file\n\n# Open raster\nsrc = rasterio.open(raster_path)\n\n# View metadata\nprint(\"Raster Metadata:\")\nprint(f\"  Width (pixels): {src.width}\")\nprint(f\"  Height (pixels): {src.height}\")\nprint(f\"  Number of bands: {src.count}\")\nprint(f\"  Data type: {src.dtypes[0]}\")\nprint(f\"  CRS: {src.crs}\")\nprint(f\"  Bounds: {src.bounds}\")\nprint(f\"  Resolution: {src.res}\")  # (x_res, y_res) in CRS units\nprint(f\"  Nodata value: {src.nodata}\")\n\nsrc.close()\n```\n\n::: {.callout-note}\n## Raster Metadata Explanation\n\n**For a Sentinel-2 10m band over Bohol:**\n\n- **Width/Height:** 5000 x 5000 pixels → 50km x 50km area\n- **Bands:** 4 (Blue, Green, Red, NIR if subset)\n- **Data type:** uint16 (0-65535 range)\n- **CRS:** EPSG:32651 (UTM Zone 51N)\n- **Resolution:** (10.0, -10.0) meters (negative y = north-up)\n- **Nodata:** 0 or 65535 (no valid data)\n:::\n\n**Better pattern: Context manager (auto-closes file)**\n\n```python\nwith rasterio.open(raster_path) as src:\n    print(f\"Opened: {src.name}\")\n    print(f\"Bands: {src.count}\")\n    # Work with src here\n# File automatically closed after 'with' block\n```\n\n### Reading Raster Data into Arrays\n\n**Read a single band:**\n\n```python\nwith rasterio.open(raster_path) as src:\n    # Read band 1 (Rasterio uses 1-indexing for bands)\n    band1 = src.read(1)\n\nprint(f\"Band 1 shape: {band1.shape}\")  # (height, width)\nprint(f\"Data type: {band1.dtype}\")\nprint(f\"Min value: {band1.min()}, Max value: {band1.max()}\")\nprint(f\"Mean value: {band1.mean():.2f}\")\n```\n\n**Read multiple bands:**\n\n```python\nwith rasterio.open(raster_path) as src:\n    # Read all bands as 3D array (bands, height, width)\n    all_bands = src.read()\n\n    # Or read specific bands\n    blue = src.read(1)   # Band 1: Blue\n    green = src.read(2)  # Band 2: Green\n    red = src.read(3)    # Band 3: Red\n    nir = src.read(4)    # Band 4: NIR\n\nprint(f\"All bands shape: {all_bands.shape}\")  # (4, height, width)\n```\n\n**For Sentinel-2, typical band order in L2A products:**\n\n| Band # | Wavelength | Name | Resolution |\n|--------|------------|------|------------|\n| 1 | 490 nm | Blue (B2) | 10m |\n| 2 | 560 nm | Green (B3) | 10m |\n| 3 | 665 nm | Red (B4) | 10m |\n| 4 | 842 nm | NIR (B8) | 10m |\n\n### Calculating Spectral Indices\n\n#### NDVI (Normalized Difference Vegetation Index)\n\n```python\nwith rasterio.open(raster_path) as src:\n    red = src.read(3).astype(float)\n    nir = src.read(4).astype(float)\n\n# Calculate NDVI\n# NDVI = (NIR - Red) / (NIR + Red)\nndvi = (nir - red) / (nir + red + 1e-10)  # Small value prevents division by zero\n\nprint(f\"NDVI range: {ndvi.min():.3f} to {ndvi.max():.3f}\")\nprint(f\"NDVI mean: {ndvi.mean():.3f}\")\n\n# Visualize NDVI\nplt.figure(figsize=(10, 8))\nplt.imshow(ndvi, cmap='RdYlGn', vmin=-1, vmax=1)\nplt.colorbar(label='NDVI', shrink=0.8)\nplt.title(\"NDVI - Vegetation Index\")\nplt.xlabel(\"Column (pixels)\")\nplt.ylabel(\"Row (pixels)\")\nplt.show()\n```\n\n**NDVI interpretation:**\n\n- **<0:** Water, clouds, snow\n- **0-0.2:** Bare soil, rock, sand, urban\n- **0.2-0.4:** Sparse vegetation, grassland\n- **0.4-0.7:** Moderate vegetation, cropland\n- **>0.7:** Dense vegetation, healthy forest\n\n::: {.philippine-context}\n**Philippine Application: Rice Paddy Monitoring**\n\n```python\n# Identify rice paddies (moderate-high NDVI during growing season)\nrice_mask = (ndvi > 0.5) & (ndvi < 0.85)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(rice_mask, cmap='Greens')\nplt.title(\"Potential Rice Paddies (NDVI 0.5-0.85)\")\nplt.colorbar()\nplt.show()\n\nrice_pixels = rice_mask.sum()\ntotal_pixels = rice_mask.size\nprint(f\"Potential rice paddies: {rice_pixels:,} pixels ({rice_pixels/total_pixels*100:.1f}%)\")\n```\n:::\n\n#### NDWI (Normalized Difference Water Index)\n\n```python\nwith rasterio.open(raster_path) as src:\n    green = src.read(2).astype(float)\n    nir = src.read(4).astype(float)\n\n# NDWI = (Green - NIR) / (Green + NIR)\nndwi = (green - nir) / (green + nir + 1e-10)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(ndwi, cmap='Blues', vmin=-1, vmax=1)\nplt.colorbar(label='NDWI', shrink=0.8)\nplt.title(\"NDWI - Water Index\")\nplt.show()\n\n# Extract water bodies (NDWI > 0.3)\nwater_mask = ndwi > 0.3\nprint(f\"Water pixels: {water_mask.sum():,}\")\n```\n\n### Creating RGB Composites\n\n**True color composite (Red, Green, Blue):**\n\n```python\nwith rasterio.open(raster_path) as src:\n    red = src.read(3)\n    green = src.read(2)\n    blue = src.read(1)\n\n# Stack bands into RGB array\nrgb = np.stack([red, green, blue], axis=2)\n\n# Scale to 0-1 range for display (Sentinel-2 L2A is 0-10000)\nrgb_scaled = rgb.astype(float) / 10000.0\nrgb_scaled = np.clip(rgb_scaled, 0, 1)  # Clip any values outside 0-1\n\n# Enhance contrast (optional)\nfrom skimage import exposure\nrgb_enhanced = exposure.rescale_intensity(rgb_scaled, in_range=(0.0, 0.3), out_range=(0, 1))\n\n# Display\nplt.figure(figsize=(12, 10))\nplt.imshow(rgb_enhanced)\nplt.title(\"True Color Composite (Red-Green-Blue)\")\nplt.axis('off')\nplt.show()\n```\n\n**False color composite (NIR, Red, Green) - highlights vegetation:**\n\n```python\nwith rasterio.open(raster_path) as src:\n    nir = src.read(4)\n    red = src.read(3)\n    green = src.read(2)\n\n# NIR-R-G composite\nfalse_color = np.stack([nir, red, green], axis=2)\nfalse_color_scaled = false_color.astype(float) / 10000.0\nfalse_color_scaled = np.clip(false_color_scaled, 0, 1)\n\nplt.figure(figsize=(12, 10))\nplt.imshow(false_color_scaled)\nplt.title(\"False Color Composite (NIR-Red-Green) - Vegetation appears red\")\nplt.axis('off')\nplt.show()\n```\n\n**Why false color?**\n\n- **Vegetation:** Appears bright red (high NIR reflectance)\n- **Water:** Appears dark blue/black (absorbs NIR)\n- **Urban:** Appears cyan/gray\n- **Bare soil:** Appears brown/tan\n\nEasier to distinguish land cover types!\n\n---\n\n## Part 6: Combining Vector and Raster Operations\n\n### Clipping Raster to Vector Boundary\n\n**Extract raster data only within AOI polygon:**\n\n```python\nfrom rasterio.mask import mask\n\n# Load AOI polygon (from earlier GeoPandas section)\n# aoi_gdf = ...\n\nwith rasterio.open(raster_path) as src:\n    # Ensure CRS match\n    if aoi_gdf.crs != src.crs:\n        aoi_gdf = aoi_gdf.to_crs(src.crs)\n\n    # Get geometries in proper format\n    shapes = aoi_gdf.geometry.values\n\n    # Clip raster\n    out_image, out_transform = mask(src, shapes, crop=True)\n    out_meta = src.meta.copy()\n\n# Update metadata for clipped raster\nout_meta.update({\n    \"driver\": \"GTiff\",\n    \"height\": out_image.shape[1],\n    \"width\": out_image.shape[2],\n    \"transform\": out_transform\n})\n\nprint(f\"Original raster: {src.width} x {src.height}\")\nprint(f\"Clipped raster: {out_meta['width']} x {out_meta['height']}\")\n\n# Visualize clipped area\nfig, axes = plt.subplots(1, 2, figsize=(16, 6))\n\n# Original\naxes[0].imshow(src.read(3), cmap='gray')\naxes[0].set_title(\"Original Raster\")\n\n# Clipped\naxes[1].imshow(out_image[2], cmap='gray')  # Band 3 (Red)\naxes[1].set_title(\"Clipped to AOI\")\n\nplt.tight_layout()\nplt.show()\n```\n\n**Save clipped raster:**\n\n```python\noutput_path = '/content/drive/MyDrive/CopPhil_Training/outputs/clipped_raster.tif'\n\nwith rasterio.open(output_path, 'w', **out_meta) as dest:\n    dest.write(out_image)\n\nprint(f\"✓ Saved clipped raster to: {output_path}\")\n```\n\n### Sampling Raster Values at Point Locations\n\n**Extract pixel values at specific coordinates:**\n\n```python\n# Example: Field survey locations\nsurvey_points = gpd.GeoDataFrame({\n    'site_id': ['Site_A', 'Site_B', 'Site_C'],\n    'geometry': gpd.points_from_xy([124.0, 124.5, 123.8], [10.0, 10.3, 9.8])\n}, crs='EPSG:4326')\n\n# Sample raster at points\nwith rasterio.open(raster_path) as src:\n    # Reproject points if needed\n    if survey_points.crs != src.crs:\n        survey_points = survey_points.to_crs(src.crs)\n\n    # Extract coordinates\n    coords = [(x, y) for x, y in zip(survey_points.geometry.x, survey_points.geometry.y)]\n\n    # Sample all bands\n    sampled_values = [x for x in src.sample(coords)]\n\n# Add to GeoDataFrame\nsurvey_points['blue'] = [v[0] for v in sampled_values]\nsurvey_points['green'] = [v[1] for v in sampled_values]\nsurvey_points['red'] = [v[2] for v in sampled_values]\nsurvey_points['nir'] = [v[3] for v in sampled_values]\n\n# Calculate NDVI at points\nsurvey_points['ndvi'] = (survey_points['nir'] - survey_points['red']) / \\\n                        (survey_points['nir'] + survey_points['red'])\n\nprint(survey_points[['site_id', 'ndvi']])\n```\n\n---\n\n## Part 7: Complete Workflow Example\n\n### Scenario: Forest Health Assessment in Philippine Protected Area\n\n**Goal:** Identify potential forest stress areas using Sentinel-2 NDVI\n\n```python\n# 1. Load protected area boundary\n# (Replace with actual protected area shapefile)\nprotected_area = aoi_gdf  # Using our AOI from earlier\n\n# 2. Load Sentinel-2 imagery\nwith rasterio.open(raster_path) as src:\n    # 3. Clip to protected area\n    if protected_area.crs != src.crs:\n        protected_area = protected_area.to_crs(src.crs)\n\n    shapes = protected_area.geometry.values\n    out_image, out_transform = mask(src, shapes, crop=True)\n\n    # Extract bands\n    red = out_image[2].astype(float)\n    nir = out_image[3].astype(float)\n\n# 4. Calculate NDVI\nndvi = (nir - red) / (nir + red + 1e-10)\n\n# 5. Identify stress areas (low NDVI where forest expected)\n# Assumption: Protected area should be >0.6 NDVI (healthy forest)\nstress_threshold = 0.5\nstress_mask = (ndvi < stress_threshold) & (ndvi > 0.1)  # Exclude water/bare\n\n# 6. Visualize results\nfig, axes = plt.subplots(1, 3, figsize=(18, 6))\n\n# True color\nrgb_display = np.stack([red, green, blue], axis=2) / 10000.0\nrgb_display = np.clip(rgb_display, 0, 0.3) / 0.3  # Contrast stretch\naxes[0].imshow(rgb_display)\naxes[0].set_title(\"True Color\")\naxes[0].axis('off')\n\n# NDVI\nim1 = axes[1].imshow(ndvi, cmap='RdYlGn', vmin=0, vmax=1)\naxes[1].set_title(\"NDVI\")\naxes[1].axis('off')\nplt.colorbar(im1, ax=axes[1], shrink=0.8)\n\n# Stress areas\naxes[2].imshow(stress_mask, cmap='Reds')\naxes[2].set_title(f\"Potential Stress Areas (NDVI < {stress_threshold})\")\naxes[2].axis('off')\n\nplt.tight_layout()\nplt.show()\n\n# 7. Statistics\ntotal_pixels = ndvi.size\nstress_pixels = stress_mask.sum()\narea_m2 = stress_pixels * 100  # 10m resolution → 100 m² per pixel\narea_ha = area_m2 / 10000\n\nprint(\"=\" * 50)\nprint(\"FOREST HEALTH ASSESSMENT RESULTS\")\nprint(\"=\" * 50)\nprint(f\"Protected Area: {protected_area['id'].values[0]}\")\nprint(f\"Average NDVI: {ndvi.mean():.3f}\")\nprint(f\"Stress pixels: {stress_pixels:,} ({stress_pixels/total_pixels*100:.1f}%)\")\nprint(f\"Stress area: {area_ha:.1f} hectares\")\nprint(\"=\" * 50)\n```\n\n---\n\n## Key Takeaways\n\n::: {.callout-important}\n## Session 3 Summary\n\n**Google Colab:**\n- Cloud-based Python environment, no installation needed\n- Mount Google Drive for data access\n- Install geospatial libraries: `!pip install geopandas rasterio`\n\n**GeoPandas (Vector Data):**\n- Read shapefiles/GeoJSON: `gpd.read_file()`\n- Filter by attributes: `gdf[gdf['column'] == value]`\n- Visualize: `gdf.plot()`\n- Check/transform CRS: `gdf.crs`, `gdf.to_crs()`\n\n**Rasterio (Raster Data):**\n- Open rasters: `rasterio.open(path)`\n- Read bands: `src.read(band_number)`\n- Arrays are NumPy: all array operations work\n- Calculate indices: NDVI = `(NIR - Red) / (NIR + Red)`\n\n**Combining Vector + Raster:**\n- Clip rasters: `rasterio.mask.mask(src, shapes, crop=True)`\n- Sample at points: `src.sample(coordinates)`\n- Match CRS before spatial operations!\n\n**Next:** Session 4 will leverage Google Earth Engine to access petabytes of Sentinel data without downloading!\n:::\n\n---\n\n## Practice Exercises\n\n::: {.callout-tip}\n## Try These Challenges\n\n**Exercise 1: Load Your Own Boundary**\n\nDownload a shapefile of your province from NAMRIA Geoportal and visualize it in Colab.\n\n**Exercise 2: Calculate NDWI**\n\nModify the NDVI code to calculate NDWI and identify water bodies in the imagery.\n\n**Exercise 3: Multi-temporal NDVI**\n\nIf you have two Sentinel-2 images (dry season, wet season), calculate NDVI for both and create a change map.\n\n**Exercise 4: Zonal Statistics**\n\nCalculate average NDVI for each municipality using `rasterstats` library.\n\n**Bonus: RGB Composite from GEE Export**\n\nExport a Sentinel-2 composite from Google Earth Engine (Session 4) and visualize it using today's techniques!\n:::\n\n---\n\n## Further Reading\n\n### GeoPandas\n- [Official Documentation](https://geopandas.org/)\n- [GeoPandas Tutorial (DataCamp)](https://www.datacamp.com/tutorial/geopandas-tutorial-geospatial-analysis)\n- [GeoPandas Examples Gallery](https://geopandas.org/en/stable/gallery/index.html)\n\n### Rasterio\n- [Official Documentation](https://rasterio.readthedocs.io/)\n- [Rasterio Quickstart](https://rasterio.readthedocs.io/en/stable/quickstart.html)\n- [Python Raster Tutorial (WUR)](https://geoscripting-wur.github.io/PythonRaster/)\n\n### Combined Workflows\n- [Carpentries Geospatial Python](https://carpentries-incubator.github.io/geospatial-python/)\n- [Cropping Rasters with Vector Boundaries](https://rasterio.readthedocs.io/en/stable/topics/masking-by-shapefile.html)\n\n---\n\n## Jupyter Notebook\n\n::: {.callout-note}\n## Access the Interactive Notebook\n\nA complete Jupyter notebook with all code examples from this session is available:\n\n**[Open Notebook 1: Python Geospatial Data →](../notebooks/notebook1.qmd)**\n\nThis notebook includes:\n- All code examples ready to run\n- Additional exercises\n- Sample datasets\n- Detailed comments and explanations\n:::\n\n---\n\n::: {.session-nav}\n::: {.session-nav-link href=\"session2.qmd\"}\n::: {.session-nav-label}\n← Previous\n:::\n::: {.session-nav-title}\nSession 2: AI/ML Fundamentals\n:::\n:::\n::: {.session-nav-link href=\"session4.qmd\"}\n::: {.session-nav-label}\nNext Session\n:::\n::: {.session-nav-title}\nSession 4: Google Earth Engine →\n:::\n:::\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["include-code-files"],"css":["../styles/custom.css"],"toc":true,"toc-depth":3,"number-sections":false,"output-file":"session3.html"},"language":{"toc-title-document":"Contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Instructor","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","comments":{"hypothesis":false,"utterances":{"repo":"copphil-training/day1"}},"theme":{"light":["cosmo","../styles/custom.scss"],"dark":["darkly","../styles/custom.scss"]},"toc-expand":2,"toc-title":"On This Page","code-copy":true,"smooth-scroll":true,"anchor-sections":true,"fig-cap-location":"bottom","tbl-cap-location":"top","citations-hover":true,"footnotes-hover":true,"title":"Session 3: Hands-on Python for Geospatial Data","subtitle":"Master vector and raster data processing with GeoPandas and Rasterio","date":"last-modified"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}