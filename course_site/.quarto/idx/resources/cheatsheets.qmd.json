{"title":"Cheat Sheets","markdown":{"yaml":{"title":"Cheat Sheets","subtitle":"Quick Reference Guides for Day 1","date":"last-modified"},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\nQuick reference guides for the tools, libraries, and concepts covered in Day 1. Bookmark this page for easy access during hands-on exercises!\n\n---\n\n## Python Basics Cheat Sheet\n\n### Data Types\n\n```python\n# Numbers\ninteger = 42\nfloat_num = 3.14\n\n# Strings\ntext = \"Hello EO\"\nmultiline = \"\"\"Multiple\nlines\"\"\"\n\n# Lists (mutable)\ncoords = [14.5995, 120.9842]  # Manila lat/lon\nsensors = [\"Sentinel-1\", \"Sentinel-2\", \"Landsat-8\"]\n\n# Tuples (immutable)\nbbox = (120.0, 14.0, 121.0, 15.0)\n\n# Dictionaries\nmetadata = {\n    \"satellite\": \"Sentinel-2\",\n    \"date\": \"2025-01-15\",\n    \"cloud_cover\": 12.5\n}\n```\n\n### Control Flow\n\n```python\n# If statements\nif cloud_cover < 20:\n    print(\"Good quality image\")\nelif cloud_cover < 50:\n    print(\"Moderate quality\")\nelse:\n    print(\"Too cloudy\")\n\n# For loops\nfor sensor in sensors:\n    print(f\"Processing {sensor} data\")\n\n# List comprehension\nvalid_images = [img for img in images if img.cloud_cover < 20]\n\n# While loop\ncount = 0\nwhile count < 10:\n    count += 1\n```\n\n### Functions\n\n```python\n# Basic function\ndef calculate_ndvi(nir, red):\n    \"\"\"Calculate Normalized Difference Vegetation Index.\"\"\"\n    return (nir - red) / (nir + red)\n\n# Function with default arguments\ndef load_image(path, band=\"B04\", scale=10):\n    return ee.Image(path).select(band).reproject(scale=scale)\n\n# Lambda function\nsquare = lambda x: x ** 2\n```\n\n---\n\n## NumPy Cheat Sheet\n\n### Array Creation\n\n```python\nimport numpy as np\n\n# From lists\narr = np.array([1, 2, 3, 4, 5])\nmatrix = np.array([[1, 2], [3, 4]])\n\n# Special arrays\nzeros = np.zeros((3, 3))           # 3x3 array of zeros\nones = np.ones((2, 4))             # 2x4 array of ones\nidentity = np.eye(4)               # 4x4 identity matrix\nrandom = np.random.rand(3, 3)      # 3x3 random [0, 1)\nrange_arr = np.arange(0, 10, 2)    # [0, 2, 4, 6, 8]\nlinspace = np.linspace(0, 1, 5)    # 5 values from 0 to 1\n```\n\n### Array Operations\n\n```python\n# Arithmetic (element-wise)\na + b          # Addition\na - b          # Subtraction\na * b          # Multiplication\na / b          # Division\na ** 2         # Power\n\n# Statistics\narr.mean()     # Mean\narr.std()      # Standard deviation\narr.min()      # Minimum\narr.max()      # Maximum\narr.sum()      # Sum\n\n# Indexing\narr[0]         # First element\narr[-1]        # Last element\narr[1:4]       # Slice indices 1-3\nmatrix[0, :]   # First row\nmatrix[:, 1]   # Second column\n\n# Boolean indexing\narr[arr > 5]   # Elements greater than 5\n```\n\n### Array Manipulation\n\n```python\n# Shape operations\narr.reshape(3, 2)        # Reshape to 3x2\narr.flatten()            # Flatten to 1D\narr.transpose()          # Transpose\n\n# Stacking\nnp.vstack([a, b])        # Vertical stack\nnp.hstack([a, b])        # Horizontal stack\nnp.stack([a, b], axis=0) # Stack along axis\n\n# Concatenation\nnp.concatenate([a, b])\n```\n\n---\n\n## GeoPandas Cheat Sheet\n\n### Reading/Writing Vector Data\n\n```python\nimport geopandas as gpd\n\n# Read files\ngdf = gpd.read_file(\"data.shp\")\ngdf = gpd.read_file(\"data.geojson\")\ngdf = gpd.read_file(\"data.gpkg\")\n\n# Write files\ngdf.to_file(\"output.shp\")\ngdf.to_file(\"output.geojson\", driver=\"GeoJSON\")\ngdf.to_file(\"output.gpkg\", driver=\"GPKG\")\n```\n\n### GeoDataFrame Operations\n\n```python\n# Inspect data\ngdf.head()              # First 5 rows\ngdf.info()              # Column info\ngdf.describe()          # Statistics\ngdf.crs                 # Coordinate Reference System\ngdf.geometry            # Geometry column\ngdf.total_bounds        # Bounding box [minx, miny, maxx, maxy]\n\n# Filtering\nmetro_manila = gdf[gdf[\"region\"] == \"NCR\"]\nlarge_areas = gdf[gdf.area > 1000000]\n\n# Sorting\ngdf.sort_values(\"population\", ascending=False)\n```\n\n### Spatial Operations\n\n```python\n# Coordinate Reference System\ngdf.to_crs(\"EPSG:4326\")          # Reproject to WGS84\ngdf.to_crs(\"EPSG:32651\")         # Reproject to UTM Zone 51N\n\n# Geometric properties\ngdf.area                          # Area\ngdf.length                        # Perimeter/length\ngdf.centroid                      # Centroids\ngdf.bounds                        # Bounding boxes\n\n# Spatial relationships\ngdf1.intersects(gdf2)            # Intersection check\ngdf1.contains(point)             # Containment check\ngdf1.within(polygon)             # Within check\n\n# Spatial joins\ngpd.sjoin(points, polygons, how=\"inner\", predicate=\"within\")\n\n# Overlay operations\ngpd.overlay(gdf1, gdf2, how=\"intersection\")\ngpd.overlay(gdf1, gdf2, how=\"union\")\ngpd.overlay(gdf1, gdf2, how=\"difference\")\n```\n\n### Visualization\n\n```python\n# Basic plot\ngdf.plot()\n\n# Styled plot\ngdf.plot(column=\"population\",\n         cmap=\"YlOrRd\",\n         legend=True,\n         figsize=(10, 8))\n\n# Multiple layers\nax = gdf1.plot(color=\"blue\", alpha=0.5)\ngdf2.plot(ax=ax, color=\"red\", alpha=0.5)\n```\n\n---\n\n## Rasterio Cheat Sheet\n\n### Reading Raster Data\n\n```python\nimport rasterio\nfrom rasterio.plot import show\n\n# Open raster\nwith rasterio.open(\"image.tif\") as src:\n    # Metadata\n    print(src.crs)          # CRS\n    print(src.bounds)       # Bounding box\n    print(src.shape)        # (height, width)\n    print(src.count)        # Number of bands\n    print(src.transform)    # Affine transform\n\n    # Read data\n    band1 = src.read(1)     # Read band 1\n    all_bands = src.read()  # Read all bands\n\n    # Windowed read\n    window = rasterio.windows.Window(0, 0, 512, 512)\n    subset = src.read(1, window=window)\n```\n\n### Writing Raster Data\n\n```python\n# Write single band\nwith rasterio.open(\n    \"output.tif\",\n    \"w\",\n    driver=\"GTiff\",\n    height=data.shape[0],\n    width=data.shape[1],\n    count=1,\n    dtype=data.dtype,\n    crs=\"EPSG:32651\",\n    transform=transform\n) as dst:\n    dst.write(data, 1)\n\n# Write multiple bands\nwith rasterio.open(\"output.tif\", \"w\", ...) as dst:\n    for i, band in enumerate(bands, start=1):\n        dst.write(band, i)\n```\n\n### Raster Operations\n\n```python\n# Reproject\nfrom rasterio.warp import reproject, Resampling\n\nreproject(\n    source=src_array,\n    destination=dst_array,\n    src_transform=src.transform,\n    src_crs=src.crs,\n    dst_transform=dst_transform,\n    dst_crs=\"EPSG:4326\",\n    resampling=Resampling.bilinear\n)\n\n# Masking\nfrom rasterio.mask import mask\n\nwith rasterio.open(\"image.tif\") as src:\n    clipped, transform = mask(src, shapes, crop=True)\n\n# Calculate indices\nwith rasterio.open(\"sentinel2.tif\") as src:\n    red = src.read(4).astype(float)\n    nir = src.read(8).astype(float)\n    ndvi = (nir - red) / (nir + red)\n```\n\n### Visualization\n\n```python\nfrom rasterio.plot import show\n\n# Single band\nwith rasterio.open(\"image.tif\") as src:\n    show(src, cmap=\"gray\")\n\n# RGB composite\nwith rasterio.open(\"image.tif\") as src:\n    show((src, [4, 3, 2]))  # True color (R, G, B)\n```\n\n---\n\n## Google Earth Engine (Python API) Cheat Sheet\n\n### Initialization\n\n```python\nimport ee\n\n# Authenticate (first time only)\nee.Authenticate()\n\n# Initialize\nee.Initialize()\n```\n\n### Image Operations\n\n```python\n# Load single image\nimage = ee.Image(\"COPERNICUS/S2/20250115T012345_20250115T012345_T51PTS\")\n\n# Load from collection\ncollection = ee.ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\")\nimage = collection.first()\n\n# Select bands\nrgb = image.select([\"B4\", \"B3\", \"B2\"])\nnir = image.select(\"B8\")\n\n# Band math\nndvi = image.normalizedDifference([\"B8\", \"B4\"]).rename(\"NDVI\")\n\n# Or manually\nnir = image.select(\"B8\")\nred = image.select(\"B4\")\nndvi = nir.subtract(red).divide(nir.add(red))\n```\n\n### ImageCollection Filtering\n\n```python\n# Spatial filter\nroi = ee.Geometry.Rectangle([120.0, 14.0, 121.0, 15.0])\nfiltered = collection.filterBounds(roi)\n\n# Temporal filter\nfiltered = collection.filterDate(\"2024-01-01\", \"2024-12-31\")\n\n# Metadata filter\nlow_cloud = collection.filter(ee.Filter.lt(\"CLOUDY_PIXEL_PERCENTAGE\", 20))\n\n# Combined\nfiltered = (collection\n    .filterBounds(roi)\n    .filterDate(\"2024-01-01\", \"2024-12-31\")\n    .filter(ee.Filter.lt(\"CLOUDY_PIXEL_PERCENTAGE\", 20)))\n```\n\n### Cloud Masking\n\n```python\n# Sentinel-2 cloud masking\ndef mask_s2_clouds(image):\n    qa = image.select(\"QA60\")\n    cloud_mask = qa.bitwiseAnd(1 << 10).eq(0).And(\n                 qa.bitwiseAnd(1 << 11).eq(0))\n    return image.updateMask(cloud_mask)\n\n# Apply to collection\nmasked = collection.map(mask_s2_clouds)\n```\n\n### Reducers\n\n```python\n# Temporal reduction\nmedian = collection.median()\nmean = collection.mean()\nmax_val = collection.max()\n\n# Spatial reduction\nmean_value = image.reduceRegion(\n    reducer=ee.Reducer.mean(),\n    geometry=roi,\n    scale=10\n).getInfo()\n\n# Percentile\npercentile_90 = collection.reduce(ee.Reducer.percentile([90]))\n```\n\n### Compositing\n\n```python\n# Median composite\ncomposite = (collection\n    .filterBounds(roi)\n    .filterDate(\"2024-06-01\", \"2024-08-31\")\n    .median())\n\n# Quality mosaic (least cloudy pixels)\ncomposite = collection.qualityMosaic(\"B8\")\n```\n\n### Export\n\n```python\n# Export to Drive\ntask = ee.batch.Export.image.toDrive(\n    image=ndvi,\n    description=\"NDVI_Export\",\n    folder=\"EarthEngine\",\n    fileNamePrefix=\"ndvi_palawan\",\n    scale=10,\n    region=roi,\n    maxPixels=1e13\n)\ntask.start()\n\n# Check status\nprint(task.status())\n\n# Export to Asset\ntask = ee.batch.Export.image.toAsset(\n    image=composite,\n    description=\"Composite_Export\",\n    assetId=\"users/yourname/composite\",\n    scale=10,\n    region=roi\n)\n```\n\n### Visualization\n\n```python\n# In Jupyter with geemap\nimport geemap\n\nMap = geemap.Map()\nMap.centerObject(roi, 10)\n\n# Add image\nvis_params = {\n    \"bands\": [\"B4\", \"B3\", \"B2\"],\n    \"min\": 0,\n    \"max\": 3000,\n    \"gamma\": 1.4\n}\nMap.addLayer(image, vis_params, \"Sentinel-2\")\n\n# Add NDVI\nndvi_vis = {\n    \"min\": 0,\n    \"max\": 1,\n    \"palette\": [\"red\", \"yellow\", \"green\"]\n}\nMap.addLayer(ndvi, ndvi_vis, \"NDVI\")\n\nMap\n```\n\n---\n\n## Sentinel Mission Quick Reference\n\n### Sentinel-1 (SAR)\n\n| **Parameter** | **Value** |\n|---------------|-----------|\n| **Type** | C-band SAR |\n| **Bands** | VV, VH |\n| **Resolution** | 10m (IW mode) |\n| **Swath** | 250 km |\n| **Revisit** | 6 days (2 satellites) |\n| **GEE Collection** | `COPERNICUS/S1_GRD` |\n\n**Common Applications:**\n- Flood mapping (water detection)\n- Ship detection\n- Crop monitoring\n- Land subsidence\n\n### Sentinel-2 (Optical)\n\n| **Band** | **Name** | **Wavelength (nm)** | **Resolution (m)** |\n|----------|----------|---------------------|-------------------|\n| B1 | Coastal aerosol | 443 | 60 |\n| B2 | Blue | 490 | 10 |\n| B3 | Green | 560 | 10 |\n| B4 | Red | 665 | 10 |\n| B5 | Red edge 1 | 705 | 20 |\n| B6 | Red edge 2 | 740 | 20 |\n| B7 | Red edge 3 | 783 | 20 |\n| B8 | NIR | 842 | 10 |\n| B8A | Narrow NIR | 865 | 20 |\n| B9 | Water vapor | 945 | 60 |\n| B11 | SWIR 1 | 1610 | 20 |\n| B12 | SWIR 2 | 2190 | 20 |\n\n**Revisit Time:** 5 days (3 satellites: 2A, 2B, 2C)\n\n**GEE Collections:**\n- `COPERNICUS/S2_SR_HARMONIZED` (Surface Reflectance)\n- `COPERNICUS/S2_HARMONIZED` (Top of Atmosphere)\n\n---\n\n## Common Spectral Indices\n\n### NDVI (Vegetation)\n```python\n# Google Earth Engine\nndvi = image.normalizedDifference([\"B8\", \"B4\"])\n\n# NumPy/Rasterio\nndvi = (nir - red) / (nir + red)\n```\n\n### NDWI (Water)\n```python\n# Green - NIR (McFeeters)\nndwi = image.normalizedDifference([\"B3\", \"B8\"])\n\n# NIR - SWIR (Gao)\nmndwi = image.normalizedDifference([\"B8\", \"B11\"])\n```\n\n### NDBI (Built-up)\n```python\nndbi = image.normalizedDifference([\"B11\", \"B8\"])\n```\n\n### EVI (Enhanced Vegetation Index)\n```python\nevi = image.expression(\n    \"2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))\",\n    {\n        \"NIR\": image.select(\"B8\"),\n        \"RED\": image.select(\"B4\"),\n        \"BLUE\": image.select(\"B2\")\n    }\n)\n```\n\n---\n\n## Philippine Regions & Provinces\n\n### Administrative Levels\n- **Region (17)** → **Province (81)** → **Municipality/City** → **Barangay**\n\n### Useful Bounding Boxes (WGS84)\n\n| **Area** | **Bounds [W, S, E, N]** |\n|----------|-------------------------|\n| Philippines | [116.0, 4.0, 127.0, 21.0] |\n| Luzon | [119.5, 12.0, 122.5, 19.0] |\n| Metro Manila | [120.9, 14.4, 121.15, 14.8] |\n| Palawan | [117.0, 7.5, 120.0, 12.0] |\n| Mindanao | [121.0, 5.0, 127.0, 10.0] |\n\n---\n\n## Keyboard Shortcuts\n\n### Google Colab\n- **Run cell:** `Shift + Enter`\n- **Insert cell above:** `Ctrl/Cmd + M A`\n- **Insert cell below:** `Ctrl/Cmd + M B`\n- **Delete cell:** `Ctrl/Cmd + M D`\n- **Interrupt execution:** `Ctrl/Cmd + M I`\n- **Comment/uncomment:** `Ctrl/Cmd + /`\n\n### Jupyter Notebook\n- **Run cell:** `Shift + Enter`\n- **Insert cell below:** `B`\n- **Insert cell above:** `A`\n- **Delete cell:** `D D` (press D twice)\n- **Change to markdown:** `M`\n- **Change to code:** `Y`\n\n---\n\n## Common Error Messages\n\n### \"ee is not defined\"\n```python\n# Solution: Initialize Earth Engine\nimport ee\nee.Initialize()\n```\n\n### \"ModuleNotFoundError: No module named 'geopandas'\"\n```python\n# Solution: Install the package\n!pip install geopandas\n```\n\n### \"RuntimeError: rasterio is not installed\"\n```python\n# Solution: Install rasterio\n!pip install rasterio\n```\n\n### \"User memory limit exceeded\"\n```python\n# Solution: Reduce data scope\n# - Use smaller region\n# - Filter dates more strictly\n# - Increase scale parameter\n```\n\n---\n\n## Downloadable PDFs\n\n::: {.callout-note}\n## Print-Friendly Versions\nDownload PDF versions of these cheat sheets for offline reference:\n\n- [Python Basics (PDF)](#)\n- [GeoPandas Quick Reference (PDF)](#)\n- [Rasterio Commands (PDF)](#)\n- [Earth Engine Python API (PDF)](#)\n- [Sentinel Missions (PDF)](#)\n\n*PDFs will be available in the [Downloads](downloads.qmd) section.*\n:::\n\n---\n\n## Additional Resources\n\n- **Official Documentation:**\n  - [Python Docs](https://docs.python.org/3/)\n  - [NumPy Docs](https://numpy.org/doc/)\n  - [GeoPandas Docs](https://geopandas.org/)\n  - [Rasterio Docs](https://rasterio.readthedocs.io/)\n  - [Earth Engine Guides](https://developers.google.com/earth-engine/guides)\n\n- **Community Cheat Sheets:**\n  - [NumPy Cheat Sheet (DataCamp)](https://www.datacamp.com/cheat-sheet/numpy-cheat-sheet-data-analysis-in-python)\n  - [Pandas Cheat Sheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)\n  - [Earth Engine Cheat Sheet](https://github.com/giswqs/qgis-earthengine-examples/tree/master/Folium)\n\n---\n\n*Bookmark this page for quick access during training exercises!*\n","srcMarkdownNoYaml":"\n\n## Overview\n\nQuick reference guides for the tools, libraries, and concepts covered in Day 1. Bookmark this page for easy access during hands-on exercises!\n\n---\n\n## Python Basics Cheat Sheet\n\n### Data Types\n\n```python\n# Numbers\ninteger = 42\nfloat_num = 3.14\n\n# Strings\ntext = \"Hello EO\"\nmultiline = \"\"\"Multiple\nlines\"\"\"\n\n# Lists (mutable)\ncoords = [14.5995, 120.9842]  # Manila lat/lon\nsensors = [\"Sentinel-1\", \"Sentinel-2\", \"Landsat-8\"]\n\n# Tuples (immutable)\nbbox = (120.0, 14.0, 121.0, 15.0)\n\n# Dictionaries\nmetadata = {\n    \"satellite\": \"Sentinel-2\",\n    \"date\": \"2025-01-15\",\n    \"cloud_cover\": 12.5\n}\n```\n\n### Control Flow\n\n```python\n# If statements\nif cloud_cover < 20:\n    print(\"Good quality image\")\nelif cloud_cover < 50:\n    print(\"Moderate quality\")\nelse:\n    print(\"Too cloudy\")\n\n# For loops\nfor sensor in sensors:\n    print(f\"Processing {sensor} data\")\n\n# List comprehension\nvalid_images = [img for img in images if img.cloud_cover < 20]\n\n# While loop\ncount = 0\nwhile count < 10:\n    count += 1\n```\n\n### Functions\n\n```python\n# Basic function\ndef calculate_ndvi(nir, red):\n    \"\"\"Calculate Normalized Difference Vegetation Index.\"\"\"\n    return (nir - red) / (nir + red)\n\n# Function with default arguments\ndef load_image(path, band=\"B04\", scale=10):\n    return ee.Image(path).select(band).reproject(scale=scale)\n\n# Lambda function\nsquare = lambda x: x ** 2\n```\n\n---\n\n## NumPy Cheat Sheet\n\n### Array Creation\n\n```python\nimport numpy as np\n\n# From lists\narr = np.array([1, 2, 3, 4, 5])\nmatrix = np.array([[1, 2], [3, 4]])\n\n# Special arrays\nzeros = np.zeros((3, 3))           # 3x3 array of zeros\nones = np.ones((2, 4))             # 2x4 array of ones\nidentity = np.eye(4)               # 4x4 identity matrix\nrandom = np.random.rand(3, 3)      # 3x3 random [0, 1)\nrange_arr = np.arange(0, 10, 2)    # [0, 2, 4, 6, 8]\nlinspace = np.linspace(0, 1, 5)    # 5 values from 0 to 1\n```\n\n### Array Operations\n\n```python\n# Arithmetic (element-wise)\na + b          # Addition\na - b          # Subtraction\na * b          # Multiplication\na / b          # Division\na ** 2         # Power\n\n# Statistics\narr.mean()     # Mean\narr.std()      # Standard deviation\narr.min()      # Minimum\narr.max()      # Maximum\narr.sum()      # Sum\n\n# Indexing\narr[0]         # First element\narr[-1]        # Last element\narr[1:4]       # Slice indices 1-3\nmatrix[0, :]   # First row\nmatrix[:, 1]   # Second column\n\n# Boolean indexing\narr[arr > 5]   # Elements greater than 5\n```\n\n### Array Manipulation\n\n```python\n# Shape operations\narr.reshape(3, 2)        # Reshape to 3x2\narr.flatten()            # Flatten to 1D\narr.transpose()          # Transpose\n\n# Stacking\nnp.vstack([a, b])        # Vertical stack\nnp.hstack([a, b])        # Horizontal stack\nnp.stack([a, b], axis=0) # Stack along axis\n\n# Concatenation\nnp.concatenate([a, b])\n```\n\n---\n\n## GeoPandas Cheat Sheet\n\n### Reading/Writing Vector Data\n\n```python\nimport geopandas as gpd\n\n# Read files\ngdf = gpd.read_file(\"data.shp\")\ngdf = gpd.read_file(\"data.geojson\")\ngdf = gpd.read_file(\"data.gpkg\")\n\n# Write files\ngdf.to_file(\"output.shp\")\ngdf.to_file(\"output.geojson\", driver=\"GeoJSON\")\ngdf.to_file(\"output.gpkg\", driver=\"GPKG\")\n```\n\n### GeoDataFrame Operations\n\n```python\n# Inspect data\ngdf.head()              # First 5 rows\ngdf.info()              # Column info\ngdf.describe()          # Statistics\ngdf.crs                 # Coordinate Reference System\ngdf.geometry            # Geometry column\ngdf.total_bounds        # Bounding box [minx, miny, maxx, maxy]\n\n# Filtering\nmetro_manila = gdf[gdf[\"region\"] == \"NCR\"]\nlarge_areas = gdf[gdf.area > 1000000]\n\n# Sorting\ngdf.sort_values(\"population\", ascending=False)\n```\n\n### Spatial Operations\n\n```python\n# Coordinate Reference System\ngdf.to_crs(\"EPSG:4326\")          # Reproject to WGS84\ngdf.to_crs(\"EPSG:32651\")         # Reproject to UTM Zone 51N\n\n# Geometric properties\ngdf.area                          # Area\ngdf.length                        # Perimeter/length\ngdf.centroid                      # Centroids\ngdf.bounds                        # Bounding boxes\n\n# Spatial relationships\ngdf1.intersects(gdf2)            # Intersection check\ngdf1.contains(point)             # Containment check\ngdf1.within(polygon)             # Within check\n\n# Spatial joins\ngpd.sjoin(points, polygons, how=\"inner\", predicate=\"within\")\n\n# Overlay operations\ngpd.overlay(gdf1, gdf2, how=\"intersection\")\ngpd.overlay(gdf1, gdf2, how=\"union\")\ngpd.overlay(gdf1, gdf2, how=\"difference\")\n```\n\n### Visualization\n\n```python\n# Basic plot\ngdf.plot()\n\n# Styled plot\ngdf.plot(column=\"population\",\n         cmap=\"YlOrRd\",\n         legend=True,\n         figsize=(10, 8))\n\n# Multiple layers\nax = gdf1.plot(color=\"blue\", alpha=0.5)\ngdf2.plot(ax=ax, color=\"red\", alpha=0.5)\n```\n\n---\n\n## Rasterio Cheat Sheet\n\n### Reading Raster Data\n\n```python\nimport rasterio\nfrom rasterio.plot import show\n\n# Open raster\nwith rasterio.open(\"image.tif\") as src:\n    # Metadata\n    print(src.crs)          # CRS\n    print(src.bounds)       # Bounding box\n    print(src.shape)        # (height, width)\n    print(src.count)        # Number of bands\n    print(src.transform)    # Affine transform\n\n    # Read data\n    band1 = src.read(1)     # Read band 1\n    all_bands = src.read()  # Read all bands\n\n    # Windowed read\n    window = rasterio.windows.Window(0, 0, 512, 512)\n    subset = src.read(1, window=window)\n```\n\n### Writing Raster Data\n\n```python\n# Write single band\nwith rasterio.open(\n    \"output.tif\",\n    \"w\",\n    driver=\"GTiff\",\n    height=data.shape[0],\n    width=data.shape[1],\n    count=1,\n    dtype=data.dtype,\n    crs=\"EPSG:32651\",\n    transform=transform\n) as dst:\n    dst.write(data, 1)\n\n# Write multiple bands\nwith rasterio.open(\"output.tif\", \"w\", ...) as dst:\n    for i, band in enumerate(bands, start=1):\n        dst.write(band, i)\n```\n\n### Raster Operations\n\n```python\n# Reproject\nfrom rasterio.warp import reproject, Resampling\n\nreproject(\n    source=src_array,\n    destination=dst_array,\n    src_transform=src.transform,\n    src_crs=src.crs,\n    dst_transform=dst_transform,\n    dst_crs=\"EPSG:4326\",\n    resampling=Resampling.bilinear\n)\n\n# Masking\nfrom rasterio.mask import mask\n\nwith rasterio.open(\"image.tif\") as src:\n    clipped, transform = mask(src, shapes, crop=True)\n\n# Calculate indices\nwith rasterio.open(\"sentinel2.tif\") as src:\n    red = src.read(4).astype(float)\n    nir = src.read(8).astype(float)\n    ndvi = (nir - red) / (nir + red)\n```\n\n### Visualization\n\n```python\nfrom rasterio.plot import show\n\n# Single band\nwith rasterio.open(\"image.tif\") as src:\n    show(src, cmap=\"gray\")\n\n# RGB composite\nwith rasterio.open(\"image.tif\") as src:\n    show((src, [4, 3, 2]))  # True color (R, G, B)\n```\n\n---\n\n## Google Earth Engine (Python API) Cheat Sheet\n\n### Initialization\n\n```python\nimport ee\n\n# Authenticate (first time only)\nee.Authenticate()\n\n# Initialize\nee.Initialize()\n```\n\n### Image Operations\n\n```python\n# Load single image\nimage = ee.Image(\"COPERNICUS/S2/20250115T012345_20250115T012345_T51PTS\")\n\n# Load from collection\ncollection = ee.ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\")\nimage = collection.first()\n\n# Select bands\nrgb = image.select([\"B4\", \"B3\", \"B2\"])\nnir = image.select(\"B8\")\n\n# Band math\nndvi = image.normalizedDifference([\"B8\", \"B4\"]).rename(\"NDVI\")\n\n# Or manually\nnir = image.select(\"B8\")\nred = image.select(\"B4\")\nndvi = nir.subtract(red).divide(nir.add(red))\n```\n\n### ImageCollection Filtering\n\n```python\n# Spatial filter\nroi = ee.Geometry.Rectangle([120.0, 14.0, 121.0, 15.0])\nfiltered = collection.filterBounds(roi)\n\n# Temporal filter\nfiltered = collection.filterDate(\"2024-01-01\", \"2024-12-31\")\n\n# Metadata filter\nlow_cloud = collection.filter(ee.Filter.lt(\"CLOUDY_PIXEL_PERCENTAGE\", 20))\n\n# Combined\nfiltered = (collection\n    .filterBounds(roi)\n    .filterDate(\"2024-01-01\", \"2024-12-31\")\n    .filter(ee.Filter.lt(\"CLOUDY_PIXEL_PERCENTAGE\", 20)))\n```\n\n### Cloud Masking\n\n```python\n# Sentinel-2 cloud masking\ndef mask_s2_clouds(image):\n    qa = image.select(\"QA60\")\n    cloud_mask = qa.bitwiseAnd(1 << 10).eq(0).And(\n                 qa.bitwiseAnd(1 << 11).eq(0))\n    return image.updateMask(cloud_mask)\n\n# Apply to collection\nmasked = collection.map(mask_s2_clouds)\n```\n\n### Reducers\n\n```python\n# Temporal reduction\nmedian = collection.median()\nmean = collection.mean()\nmax_val = collection.max()\n\n# Spatial reduction\nmean_value = image.reduceRegion(\n    reducer=ee.Reducer.mean(),\n    geometry=roi,\n    scale=10\n).getInfo()\n\n# Percentile\npercentile_90 = collection.reduce(ee.Reducer.percentile([90]))\n```\n\n### Compositing\n\n```python\n# Median composite\ncomposite = (collection\n    .filterBounds(roi)\n    .filterDate(\"2024-06-01\", \"2024-08-31\")\n    .median())\n\n# Quality mosaic (least cloudy pixels)\ncomposite = collection.qualityMosaic(\"B8\")\n```\n\n### Export\n\n```python\n# Export to Drive\ntask = ee.batch.Export.image.toDrive(\n    image=ndvi,\n    description=\"NDVI_Export\",\n    folder=\"EarthEngine\",\n    fileNamePrefix=\"ndvi_palawan\",\n    scale=10,\n    region=roi,\n    maxPixels=1e13\n)\ntask.start()\n\n# Check status\nprint(task.status())\n\n# Export to Asset\ntask = ee.batch.Export.image.toAsset(\n    image=composite,\n    description=\"Composite_Export\",\n    assetId=\"users/yourname/composite\",\n    scale=10,\n    region=roi\n)\n```\n\n### Visualization\n\n```python\n# In Jupyter with geemap\nimport geemap\n\nMap = geemap.Map()\nMap.centerObject(roi, 10)\n\n# Add image\nvis_params = {\n    \"bands\": [\"B4\", \"B3\", \"B2\"],\n    \"min\": 0,\n    \"max\": 3000,\n    \"gamma\": 1.4\n}\nMap.addLayer(image, vis_params, \"Sentinel-2\")\n\n# Add NDVI\nndvi_vis = {\n    \"min\": 0,\n    \"max\": 1,\n    \"palette\": [\"red\", \"yellow\", \"green\"]\n}\nMap.addLayer(ndvi, ndvi_vis, \"NDVI\")\n\nMap\n```\n\n---\n\n## Sentinel Mission Quick Reference\n\n### Sentinel-1 (SAR)\n\n| **Parameter** | **Value** |\n|---------------|-----------|\n| **Type** | C-band SAR |\n| **Bands** | VV, VH |\n| **Resolution** | 10m (IW mode) |\n| **Swath** | 250 km |\n| **Revisit** | 6 days (2 satellites) |\n| **GEE Collection** | `COPERNICUS/S1_GRD` |\n\n**Common Applications:**\n- Flood mapping (water detection)\n- Ship detection\n- Crop monitoring\n- Land subsidence\n\n### Sentinel-2 (Optical)\n\n| **Band** | **Name** | **Wavelength (nm)** | **Resolution (m)** |\n|----------|----------|---------------------|-------------------|\n| B1 | Coastal aerosol | 443 | 60 |\n| B2 | Blue | 490 | 10 |\n| B3 | Green | 560 | 10 |\n| B4 | Red | 665 | 10 |\n| B5 | Red edge 1 | 705 | 20 |\n| B6 | Red edge 2 | 740 | 20 |\n| B7 | Red edge 3 | 783 | 20 |\n| B8 | NIR | 842 | 10 |\n| B8A | Narrow NIR | 865 | 20 |\n| B9 | Water vapor | 945 | 60 |\n| B11 | SWIR 1 | 1610 | 20 |\n| B12 | SWIR 2 | 2190 | 20 |\n\n**Revisit Time:** 5 days (3 satellites: 2A, 2B, 2C)\n\n**GEE Collections:**\n- `COPERNICUS/S2_SR_HARMONIZED` (Surface Reflectance)\n- `COPERNICUS/S2_HARMONIZED` (Top of Atmosphere)\n\n---\n\n## Common Spectral Indices\n\n### NDVI (Vegetation)\n```python\n# Google Earth Engine\nndvi = image.normalizedDifference([\"B8\", \"B4\"])\n\n# NumPy/Rasterio\nndvi = (nir - red) / (nir + red)\n```\n\n### NDWI (Water)\n```python\n# Green - NIR (McFeeters)\nndwi = image.normalizedDifference([\"B3\", \"B8\"])\n\n# NIR - SWIR (Gao)\nmndwi = image.normalizedDifference([\"B8\", \"B11\"])\n```\n\n### NDBI (Built-up)\n```python\nndbi = image.normalizedDifference([\"B11\", \"B8\"])\n```\n\n### EVI (Enhanced Vegetation Index)\n```python\nevi = image.expression(\n    \"2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))\",\n    {\n        \"NIR\": image.select(\"B8\"),\n        \"RED\": image.select(\"B4\"),\n        \"BLUE\": image.select(\"B2\")\n    }\n)\n```\n\n---\n\n## Philippine Regions & Provinces\n\n### Administrative Levels\n- **Region (17)** → **Province (81)** → **Municipality/City** → **Barangay**\n\n### Useful Bounding Boxes (WGS84)\n\n| **Area** | **Bounds [W, S, E, N]** |\n|----------|-------------------------|\n| Philippines | [116.0, 4.0, 127.0, 21.0] |\n| Luzon | [119.5, 12.0, 122.5, 19.0] |\n| Metro Manila | [120.9, 14.4, 121.15, 14.8] |\n| Palawan | [117.0, 7.5, 120.0, 12.0] |\n| Mindanao | [121.0, 5.0, 127.0, 10.0] |\n\n---\n\n## Keyboard Shortcuts\n\n### Google Colab\n- **Run cell:** `Shift + Enter`\n- **Insert cell above:** `Ctrl/Cmd + M A`\n- **Insert cell below:** `Ctrl/Cmd + M B`\n- **Delete cell:** `Ctrl/Cmd + M D`\n- **Interrupt execution:** `Ctrl/Cmd + M I`\n- **Comment/uncomment:** `Ctrl/Cmd + /`\n\n### Jupyter Notebook\n- **Run cell:** `Shift + Enter`\n- **Insert cell below:** `B`\n- **Insert cell above:** `A`\n- **Delete cell:** `D D` (press D twice)\n- **Change to markdown:** `M`\n- **Change to code:** `Y`\n\n---\n\n## Common Error Messages\n\n### \"ee is not defined\"\n```python\n# Solution: Initialize Earth Engine\nimport ee\nee.Initialize()\n```\n\n### \"ModuleNotFoundError: No module named 'geopandas'\"\n```python\n# Solution: Install the package\n!pip install geopandas\n```\n\n### \"RuntimeError: rasterio is not installed\"\n```python\n# Solution: Install rasterio\n!pip install rasterio\n```\n\n### \"User memory limit exceeded\"\n```python\n# Solution: Reduce data scope\n# - Use smaller region\n# - Filter dates more strictly\n# - Increase scale parameter\n```\n\n---\n\n## Downloadable PDFs\n\n::: {.callout-note}\n## Print-Friendly Versions\nDownload PDF versions of these cheat sheets for offline reference:\n\n- [Python Basics (PDF)](#)\n- [GeoPandas Quick Reference (PDF)](#)\n- [Rasterio Commands (PDF)](#)\n- [Earth Engine Python API (PDF)](#)\n- [Sentinel Missions (PDF)](#)\n\n*PDFs will be available in the [Downloads](downloads.qmd) section.*\n:::\n\n---\n\n## Additional Resources\n\n- **Official Documentation:**\n  - [Python Docs](https://docs.python.org/3/)\n  - [NumPy Docs](https://numpy.org/doc/)\n  - [GeoPandas Docs](https://geopandas.org/)\n  - [Rasterio Docs](https://rasterio.readthedocs.io/)\n  - [Earth Engine Guides](https://developers.google.com/earth-engine/guides)\n\n- **Community Cheat Sheets:**\n  - [NumPy Cheat Sheet (DataCamp)](https://www.datacamp.com/cheat-sheet/numpy-cheat-sheet-data-analysis-in-python)\n  - [Pandas Cheat Sheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)\n  - [Earth Engine Cheat Sheet](https://github.com/giswqs/qgis-earthengine-examples/tree/master/Folium)\n\n---\n\n*Bookmark this page for quick access during training exercises!*\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["include-code-files"],"css":["../styles/custom.css","../styles/phase2-enhancements.css"],"toc":true,"toc-depth":3,"number-sections":false,"output-file":"cheatsheets.html"},"language":{"toc-title-document":"Contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Instructor","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","comments":{"hypothesis":false,"utterances":{"repo":"copphil-training/course-site"}},"theme":{"light":["cosmo","../styles/custom.scss"],"dark":["darkly","../styles/custom.scss"]},"toc-expand":2,"toc-title":"On This Page","code-copy":true,"smooth-scroll":true,"anchor-sections":true,"fig-cap-location":"bottom","tbl-cap-location":"top","citations-hover":true,"footnotes-hover":true,"title":"Cheat Sheets","subtitle":"Quick Reference Guides for Day 1","date":"last-modified"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}