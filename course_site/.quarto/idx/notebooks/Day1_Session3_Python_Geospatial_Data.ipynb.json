{"title":"Day 1, Session 3: Python for Geospatial Data","markdown":{"yaml":{"title":"Day 1, Session 3: Python for Geospatial Data"},"headingText":"CopPhil 4-Day Advanced Training on AI/ML for Earth Observation","containsRefs":false,"markdown":"\n\n\n\n\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/CopPhil/training/blob/main/DAY_1/notebooks/Day1_Session3_Python_Geospatial_Data.ipynb)\n\n**EU-Philippines Copernicus Capacity Support Programme**\n\n---\n\n## Learning Objectives\n\nBy the end of this session, you will be able to:\n\n1. **Set up** a Python geospatial environment in Google Colab\n2. **Load, inspect, and visualize** vector data using **GeoPandas**\n3. **Load, inspect, and visualize** raster data using **Rasterio**\n4. **Perform** basic geospatial operations (filtering, clipping, cropping)\n5. **Calculate** vegetation indices (NDVI, NDWI) from Sentinel-2 imagery\n6. **Combine** vector and raster data for integrated analysis\n7. **Apply** these skills to Philippine EO applications (DRR, CCA, NRM)\n\n---\n\n## Why This Session Matters\n\n**Python geospatial skills are the foundation of ALL AI/ML workflows in Earth Observation.**\n\nYou cannot:\n- Train a model without loading training data ‚úó\n- Preprocess satellite images without raster operations ‚úó\n- Validate results without vector boundaries ‚úó\n- Deploy solutions without understanding data formats ‚úó\n\n**This session gives you the superpowers to:**\n- Handle Sentinel-2 imagery like a pro ‚úì\n- Work with Philippine administrative boundaries ‚úì\n- Prepare analysis-ready datasets ‚úì\n- Build production-ready EO applications ‚úì\n\n---\n\n## Prerequisites\n\n- Basic Python knowledge (variables, loops, functions)\n- Google account for Colab access\n- Completion of Sessions 1-2 (Copernicus overview, AI/ML concepts)\n\n---\n\n## Session Structure\n\n**Part 1:** Environment Setup (10 min)\n**Part 2:** Python Basics Recap (10 min)\n**Part 3:** GeoPandas for Vector Data (40 min)\n**Part 4:** Rasterio for Raster Data (50 min)\n**Part 5:** Combined Operations (30 min)\n\n**Total:** ~2 hours with exercises\n\n---\n\n\n\n## Part 1: Environment Setup\n\n### 1.1 Mount Google Drive\n\nWe'll use Google Drive to:\n- Access sample datasets\n- Save outputs and results\n- Share data between sessions\n\n### 1.2 Install Required Packages\n\n**Core geospatial libraries:**\n- **`geopandas`** - Vector data (shapefiles, GeoJSON)\n- **`rasterio`** - Raster data (GeoTIFF, satellite imagery)\n- **`shapely`** - Geometric operations\n- **`pyproj`** - Coordinate reference systems\n\n**Installation time:** 1-2 minutes\n\n### 1.3 Import Libraries and Verify Installation\n\n---\n\n## Part 2: Python Basics Quick Recap\n\nBefore diving into geospatial operations, let's review Python fundamentals you'll encounter throughout this notebook.\n\n**If you're comfortable with Python, feel free to skim this section.**\n\n### 2.1 Data Types and Structures\n\n### 2.2 Control Structures - Loops and Conditionals\n\n### 2.3 Functions - Reusable Code Blocks\n\n---\n\n## Part 3: GeoPandas for Vector Data\n\n**GeoPandas** extends pandas for geospatial vector data (points, lines, polygons).\n\n### Why GeoPandas?\n\n- ‚úì Read/write multiple formats (Shapefile, GeoJSON, KML, etc.)\n- ‚úì Spatial operations (intersection, buffer, union)\n- ‚úì Coordinate reference system (CRS) transformations\n- ‚úì Easy visualization\n- ‚úì Integration with pandas (filtering, grouping, etc.)\n\n### 3.1 Creating Sample Philippine Administrative Data\n\n**Note:** In production, you would load actual shapefiles from sources like:\n- NAMRIA Geoportal: https://www.geoportal.gov.ph/\n- HDX Philippines: https://data.humdata.org/group/phl\n- PhilSA: https://philsa.gov.ph/\n\n### 3.2 Inspecting the GeoDataFrame\n\n### 3.3 Filtering and Querying Vector Data\n\n### 3.4 Spatial Operations\n\n### 3.5 Visualizing Vector Data\n\n### üìù Exercise 1: Select and Plot Your Home Province\n\n**Task:** \n1. Select a province from the GeoDataFrame\n2. Calculate its population density\n3. Create a focused map showing only that province\n4. Add informative labels\n\n**Hint:** Use boolean filtering: `gdf[gdf['Province'] == 'YourProvince']`\n\n<details>\n<summary><b>Click to see solution</b></summary>\n\n```python\n# Select Palawan\nmy_province = philippines_gdf[philippines_gdf['Province'] == 'Palawan']\n\n# Calculate density\npop = my_province['Population'].values[0]\narea = my_province['Area_km2'].values[0]\ndensity = pop / area\n\n# Create visualization\nfig, ax = plt.subplots(figsize=(10, 8))\nmy_province.plot(\n    ax=ax,\n    color='forestgreen',\n    edgecolor='darkgreen',\n    linewidth=2,\n    alpha=0.6\n)\n\n# Add info text\ninfo_text = f\"Population: {pop:,}\\nArea: {area:.0f} km¬≤\\nDensity: {density:.1f} people/km¬≤\"\nax.text(0.02, 0.98, info_text,\n        transform=ax.transAxes,\n        fontsize=10,\n        verticalalignment='top',\n        bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))\n\nax.set_title(f\"{my_province['Province'].values[0]} Province\",\n             fontsize=14, fontweight='bold', pad=20)\nax.set_xlabel('Longitude (¬∞E)')\nax.set_ylabel('Latitude (¬∞N)')\nax.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n</details>\n\n---\n\n## Part 4: Rasterio for Raster Data\n\n**Rasterio** is the go-to library for working with raster/gridded data like satellite imagery.\n\n### Why Rasterio?\n\n- ‚úì Read/write GeoTIFF and other raster formats\n- ‚úì NumPy integration for fast array operations\n- ‚úì Handles multi-band imagery (Sentinel-2 has 13 bands!)\n- ‚úì Georeferencing and coordinate transformations\n- ‚úì Masking, clipping, resampling, reprojection\n\n### 4.1 Creating Synthetic Sentinel-2 Data\n\nFor this demo, we'll create realistic synthetic Sentinel-2 imagery for Palawan.\n\n**In production, you would:**\n```python\nwith rasterio.open('sentinel2_L2A_palawan.tif') as src:\n    data = src.read()\n```\n\n### 4.2 Writing Raster to File\n\n### 4.3 Opening and Inspecting Raster Metadata\n\n### 4.4 Reading Raster Data as NumPy Arrays\n\n### 4.5 Calculating Band Statistics\n\n### 4.6 Visualizing Single Bands\n\n### 4.7 Creating RGB True Color Composite\n\n### 4.8 False Color Composites\n\nFalse color composites use **non-visible** bands to highlight specific features.\n\n### 4.9 Calculating NDVI (Normalized Difference Vegetation Index)\n\n**NDVI is THE most important vegetation index in remote sensing.**\n\n$$NDVI = \\frac{NIR - Red}{NIR + Red}$$\n\n**Interpretation:**\n- **-1 to 0**: Water, bare soil, snow\n- **0 to 0.2**: Sparse vegetation, rock\n- **0.2 to 0.5**: Shrubs, grassland\n- **0.5 to 0.8**: Dense vegetation, healthy crops\n- **0.8 to 1**: Very dense vegetation (tropical forest)\n\n### 4.10 NDVI Histogram and Distribution Analysis\n\n### üìù Exercise 2: Calculate and Visualize NDWI (Water Index)\n\n**NDWI (Normalized Difference Water Index)** is used to detect water bodies.\n\n$$NDWI = \\frac{Green - NIR}{Green + NIR}$$\n\n**Task:**\n1. Write a function to calculate NDWI\n2. Calculate NDWI from the Green and NIR bands\n3. Create a visualization showing water bodies\n4. Calculate statistics (min, max, mean)\n\n**Hints:**\n- NDWI > 0.3: Water\n- NDWI 0 to 0.3: Wetlands/moist soil\n- NDWI < 0: Dry land/vegetation\n\n<details>\n<summary><b>Click to see solution</b></summary>\n\n```python\ndef calculate_ndwi(green, nir):\n    \"\"\"\n    Calculate Normalized Difference Water Index.\n    NDWI = (Green - NIR) / (Green + NIR)\n    \"\"\"\n    green = green.astype(float)\n    nir = nir.astype(float)\n    \n    denominator = green + nir\n    ndwi = np.where(denominator != 0, (green - nir) / denominator, 0)\n    \n    return ndwi\n\n# Calculate NDWI\nndwi = calculate_ndwi(green, nir)\n\n# Statistics\nprint(\"NDWI Statistics:\")\nprint(f\"  Min:    {ndwi.min():.3f}\")\nprint(f\"  Max:    {ndwi.max():.3f}\")\nprint(f\"  Mean:   {ndwi.mean():.3f}\")\nprint(f\"  Median: {np.median(ndwi):.3f}\")\n\n# Water area calculation\nwater_pixels = np.sum(ndwi > 0.3)\nwater_area_km2 = water_pixels * pixel_area_km2\nprint(f\"\\nWater bodies (NDWI > 0.3): {water_area_km2:.1f} km¬≤\")\n\n# Visualization\nfig, ax = plt.subplots(figsize=(12, 10))\n\nim = ax.imshow(ndwi, cmap='Blues', vmin=-0.5, vmax=0.5)\ncbar = plt.colorbar(im, ax=ax, shrink=0.8)\ncbar.set_label('NDWI', fontsize=12, fontweight='bold')\n\nax.set_title('NDWI - Normalized Difference Water Index',\n             fontsize=14, fontweight='bold', pad=15)\nax.set_xlabel('Column (pixel)', fontsize=11)\nax.set_ylabel('Row (pixel)', fontsize=11)\n\n# Add legend\nlegend_text = (\n    \"NDWI Interpretation:\\n\\n\"\n    \"> 0.3 (Dark Blue)\\n\"\n    \"  Water bodies\\n\\n\"\n    \"0 to 0.3 (Light Blue)\\n\"\n    \"  Wetlands, moist soil\\n\\n\"\n    \"< 0 (White/Gray)\\n\"\n    \"  Dry land, vegetation\"\n)\nax.text(1.12, 0.5, legend_text,\n        transform=ax.transAxes,\n        fontsize=9,\n        verticalalignment='center',\n        bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.9),\n        family='monospace')\n\nplt.tight_layout()\nplt.show()\n```\n</details>\n\n---\n\n## Part 5: Combined Operations - Vector and Raster Integration\n\n**The real power of geospatial analysis comes from combining vector and raster data.**\n\nCommon workflows:\n- Clip raster to administrative boundaries\n- Extract statistics per province/region\n- Overlay boundaries on satellite imagery\n- Sample raster values at point locations\n\n### 5.1 Clipping Raster to Vector Boundary\n\n### 5.2 Overlay Vector Boundaries on Raster\n\n### 5.3 Zonal Statistics - Calculate Mean NDVI per Province\n\n### 5.4 Saving Results\n\n---\n\n## Part 6: Best Practices and Common Pitfalls\n\n### 6.1 Memory Management\n\n### 6.2 CRS Alignment - CRITICAL!\n\n### 6.3 Handling NoData Values\n\n### 6.4 Common Errors and Solutions\n\n---\n\n## Summary and Key Takeaways\n\n### What You've Learned Today:\n\n#### 1. **GeoPandas for Vector Data**\n‚úì Loading and inspecting shapefiles/GeoJSON  \n‚úì Filtering by attributes and spatial queries  \n‚úì CRS transformations and projections  \n‚úì Creating professional maps and visualizations  \n‚úì Spatial operations (buffer, intersection, union)\n\n#### 2. **Rasterio for Raster Data**\n‚úì Reading multi-band satellite imagery  \n‚úì Extracting metadata and band information  \n‚úì Processing bands as NumPy arrays  \n‚úì Calculating statistics and percentiles  \n‚úì Creating RGB and false color composites\n\n#### 3. **Vegetation Indices**\n‚úì NDVI calculation and interpretation  \n‚úì NDWI for water body detection  \n‚úì Histogram analysis and thresholding  \n‚úì Land cover classification based on indices\n\n#### 4. **Integrated Workflows**\n‚úì Clipping rasters to vector boundaries  \n‚úì Overlaying vectors on rasters  \n‚úì Zonal statistics (per-province analysis)  \n‚úì Saving results in multiple formats\n\n#### 5. **Best Practices**\n‚úì Memory management techniques  \n‚úì CRS alignment (CRITICAL!)  \n‚úì NoData value handling  \n‚úì Error prevention and debugging\n\n---\n\n### Why This Matters for AI/ML\n\n**These skills are ESSENTIAL for:**\n\n1. **Data Preparation**\n   - Loading training data (labeled polygons)\n   - Preprocessing satellite imagery\n   - Creating feature layers for models\n\n2. **Feature Engineering**\n   - Calculating spectral indices (NDVI, NDWI, etc.)\n   - Extracting texture features\n   - Creating multi-temporal composites\n\n3. **Model Training**\n   - Sampling training pixels\n   - Creating validation datasets\n   - Balancing class distributions\n\n4. **Result Analysis**\n   - Visualizing model predictions\n   - Calculating accuracy metrics\n   - Validating against ground truth\n\n5. **Deployment**\n   - Processing new satellite scenes\n   - Generating operational products\n   - Creating decision support maps\n\n---\n\n### Philippine EO Applications\n\n**You can now build applications for:**\n\n**Disaster Risk Reduction (DRR):**\n- Flood extent mapping using NDWI\n- Landslide susceptibility analysis\n- Typhoon damage assessment\n\n**Climate Change Adaptation (CCA):**\n- Vegetation health monitoring (NDVI)\n- Drought impact assessment\n- Coastal erosion detection\n\n**Natural Resource Management (NRM):**\n- Forest cover monitoring\n- Agricultural land mapping\n- Marine protected area monitoring\n\n---\n\n## Next Session: Google Earth Engine Python API\n\n**Session 4 will cover:**\n- Accessing petabytes of satellite data in the cloud\n- Processing Sentinel-1 and Sentinel-2 at scale\n- Cloud masking and temporal compositing\n- Exporting data for ML workflows\n- Integrating GEE with local Python analysis\n\n**Preview:**\n```python\nimport ee\nee.Initialize()\n\n# Access entire Sentinel-2 archive\ns2 = ee.ImageCollection('COPERNICUS/S2_SR') \\\n    .filterBounds(palawan) \\\n    .filterDate('2024-01-01', '2024-12-31') \\\n    .map(mask_clouds)\n\n# Create cloud-free composite\ncomposite = s2.median()\n\n# Calculate NDVI at planetary scale!\nndvi = composite.normalizedDifference(['B8', 'B4'])\n```\n\n---\n\n## Additional Resources\n\n### Documentation\n- **GeoPandas:** https://geopandas.org/\n- **Rasterio:** https://rasterio.readthedocs.io/\n- **NumPy:** https://numpy.org/doc/\n- **Matplotlib:** https://matplotlib.org/\n\n### Tutorials\n- **Carpentries Geospatial Python:** https://carpentries-incubator.github.io/geospatial-python/\n- **Earth Data Science:** https://www.earthdatascience.org/\n- **Python for Geospatial Analysis:** https://www.tomasbeuzen.com/python-for-geospatial-analysis/\n\n### Philippine Data Sources\n- **PhilSA:** https://philsa.gov.ph/\n- **NAMRIA Geoportal:** https://www.geoportal.gov.ph/\n- **DOST-ASTI DATOS:** https://asti.dost.gov.ph/\n- **HDX Philippines:** https://data.humdata.org/group/phl\n- **HazardHunterPH:** https://hazardhunter.georisk.gov.ph/\n\n### Books\n- *Geoprocessing with Python* (Garrard)\n- *Learning Geospatial Analysis with Python* (Lawhead)\n- *Python for Data Analysis* (McKinney)\n\n---\n\n## Practice Exercises (Optional Homework)\n\nTo reinforce your learning:\n\n### Exercise A: Multi-Province Analysis\nCalculate and compare NDVI statistics for all provinces in one island group.\n\n### Exercise B: Time-Series Simulation\nCreate multiple synthetic images representing different seasons and analyze NDVI changes.\n\n### Exercise C: Custom Index\nResearch and implement another vegetation index (EVI, SAVI, or MSAVI).\n\n### Exercise D: Real Data\nDownload actual Sentinel-2 data from Copernicus Data Space and apply these techniques.\n\n### Exercise E: Water Detection\nUse NDWI to create a binary water mask and calculate total water area.\n\n---\n\n## Clean Up\n\n---\n\n# üéâ Congratulations!\n\nYou've completed **Day 1, Session 3** of the CopPhil AI/ML Training!\n\n### You now have the skills to:\n‚úÖ Work with vector data using GeoPandas  \n‚úÖ Process satellite imagery with Rasterio  \n‚úÖ Calculate vegetation indices (NDVI, NDWI)  \n‚úÖ Combine vector and raster data  \n‚úÖ Create professional visualizations  \n‚úÖ Apply best practices for geospatial Python  \n\n### These are the **foundational skills** for ALL AI/ML work in Earth Observation!\n\n**Ready for Session 4?** We'll take these skills to the cloud with Google Earth Engine!\n\n---\n\n*ü§ñ Generated with Claude Code for CopPhil Digital Space Campus*\n\n*EU-Philippines Copernicus Capacity Support Programme*\n\n*Data-Centric AI for Earth Observation*\n\n---\n","srcMarkdownNoYaml":"\n\n\n\n\n## CopPhil 4-Day Advanced Training on AI/ML for Earth Observation\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/CopPhil/training/blob/main/DAY_1/notebooks/Day1_Session3_Python_Geospatial_Data.ipynb)\n\n**EU-Philippines Copernicus Capacity Support Programme**\n\n---\n\n## Learning Objectives\n\nBy the end of this session, you will be able to:\n\n1. **Set up** a Python geospatial environment in Google Colab\n2. **Load, inspect, and visualize** vector data using **GeoPandas**\n3. **Load, inspect, and visualize** raster data using **Rasterio**\n4. **Perform** basic geospatial operations (filtering, clipping, cropping)\n5. **Calculate** vegetation indices (NDVI, NDWI) from Sentinel-2 imagery\n6. **Combine** vector and raster data for integrated analysis\n7. **Apply** these skills to Philippine EO applications (DRR, CCA, NRM)\n\n---\n\n## Why This Session Matters\n\n**Python geospatial skills are the foundation of ALL AI/ML workflows in Earth Observation.**\n\nYou cannot:\n- Train a model without loading training data ‚úó\n- Preprocess satellite images without raster operations ‚úó\n- Validate results without vector boundaries ‚úó\n- Deploy solutions without understanding data formats ‚úó\n\n**This session gives you the superpowers to:**\n- Handle Sentinel-2 imagery like a pro ‚úì\n- Work with Philippine administrative boundaries ‚úì\n- Prepare analysis-ready datasets ‚úì\n- Build production-ready EO applications ‚úì\n\n---\n\n## Prerequisites\n\n- Basic Python knowledge (variables, loops, functions)\n- Google account for Colab access\n- Completion of Sessions 1-2 (Copernicus overview, AI/ML concepts)\n\n---\n\n## Session Structure\n\n**Part 1:** Environment Setup (10 min)\n**Part 2:** Python Basics Recap (10 min)\n**Part 3:** GeoPandas for Vector Data (40 min)\n**Part 4:** Rasterio for Raster Data (50 min)\n**Part 5:** Combined Operations (30 min)\n\n**Total:** ~2 hours with exercises\n\n---\n\n\n\n## Part 1: Environment Setup\n\n### 1.1 Mount Google Drive\n\nWe'll use Google Drive to:\n- Access sample datasets\n- Save outputs and results\n- Share data between sessions\n\n### 1.2 Install Required Packages\n\n**Core geospatial libraries:**\n- **`geopandas`** - Vector data (shapefiles, GeoJSON)\n- **`rasterio`** - Raster data (GeoTIFF, satellite imagery)\n- **`shapely`** - Geometric operations\n- **`pyproj`** - Coordinate reference systems\n\n**Installation time:** 1-2 minutes\n\n### 1.3 Import Libraries and Verify Installation\n\n---\n\n## Part 2: Python Basics Quick Recap\n\nBefore diving into geospatial operations, let's review Python fundamentals you'll encounter throughout this notebook.\n\n**If you're comfortable with Python, feel free to skim this section.**\n\n### 2.1 Data Types and Structures\n\n### 2.2 Control Structures - Loops and Conditionals\n\n### 2.3 Functions - Reusable Code Blocks\n\n---\n\n## Part 3: GeoPandas for Vector Data\n\n**GeoPandas** extends pandas for geospatial vector data (points, lines, polygons).\n\n### Why GeoPandas?\n\n- ‚úì Read/write multiple formats (Shapefile, GeoJSON, KML, etc.)\n- ‚úì Spatial operations (intersection, buffer, union)\n- ‚úì Coordinate reference system (CRS) transformations\n- ‚úì Easy visualization\n- ‚úì Integration with pandas (filtering, grouping, etc.)\n\n### 3.1 Creating Sample Philippine Administrative Data\n\n**Note:** In production, you would load actual shapefiles from sources like:\n- NAMRIA Geoportal: https://www.geoportal.gov.ph/\n- HDX Philippines: https://data.humdata.org/group/phl\n- PhilSA: https://philsa.gov.ph/\n\n### 3.2 Inspecting the GeoDataFrame\n\n### 3.3 Filtering and Querying Vector Data\n\n### 3.4 Spatial Operations\n\n### 3.5 Visualizing Vector Data\n\n### üìù Exercise 1: Select and Plot Your Home Province\n\n**Task:** \n1. Select a province from the GeoDataFrame\n2. Calculate its population density\n3. Create a focused map showing only that province\n4. Add informative labels\n\n**Hint:** Use boolean filtering: `gdf[gdf['Province'] == 'YourProvince']`\n\n<details>\n<summary><b>Click to see solution</b></summary>\n\n```python\n# Select Palawan\nmy_province = philippines_gdf[philippines_gdf['Province'] == 'Palawan']\n\n# Calculate density\npop = my_province['Population'].values[0]\narea = my_province['Area_km2'].values[0]\ndensity = pop / area\n\n# Create visualization\nfig, ax = plt.subplots(figsize=(10, 8))\nmy_province.plot(\n    ax=ax,\n    color='forestgreen',\n    edgecolor='darkgreen',\n    linewidth=2,\n    alpha=0.6\n)\n\n# Add info text\ninfo_text = f\"Population: {pop:,}\\nArea: {area:.0f} km¬≤\\nDensity: {density:.1f} people/km¬≤\"\nax.text(0.02, 0.98, info_text,\n        transform=ax.transAxes,\n        fontsize=10,\n        verticalalignment='top',\n        bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))\n\nax.set_title(f\"{my_province['Province'].values[0]} Province\",\n             fontsize=14, fontweight='bold', pad=20)\nax.set_xlabel('Longitude (¬∞E)')\nax.set_ylabel('Latitude (¬∞N)')\nax.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n</details>\n\n---\n\n## Part 4: Rasterio for Raster Data\n\n**Rasterio** is the go-to library for working with raster/gridded data like satellite imagery.\n\n### Why Rasterio?\n\n- ‚úì Read/write GeoTIFF and other raster formats\n- ‚úì NumPy integration for fast array operations\n- ‚úì Handles multi-band imagery (Sentinel-2 has 13 bands!)\n- ‚úì Georeferencing and coordinate transformations\n- ‚úì Masking, clipping, resampling, reprojection\n\n### 4.1 Creating Synthetic Sentinel-2 Data\n\nFor this demo, we'll create realistic synthetic Sentinel-2 imagery for Palawan.\n\n**In production, you would:**\n```python\nwith rasterio.open('sentinel2_L2A_palawan.tif') as src:\n    data = src.read()\n```\n\n### 4.2 Writing Raster to File\n\n### 4.3 Opening and Inspecting Raster Metadata\n\n### 4.4 Reading Raster Data as NumPy Arrays\n\n### 4.5 Calculating Band Statistics\n\n### 4.6 Visualizing Single Bands\n\n### 4.7 Creating RGB True Color Composite\n\n### 4.8 False Color Composites\n\nFalse color composites use **non-visible** bands to highlight specific features.\n\n### 4.9 Calculating NDVI (Normalized Difference Vegetation Index)\n\n**NDVI is THE most important vegetation index in remote sensing.**\n\n$$NDVI = \\frac{NIR - Red}{NIR + Red}$$\n\n**Interpretation:**\n- **-1 to 0**: Water, bare soil, snow\n- **0 to 0.2**: Sparse vegetation, rock\n- **0.2 to 0.5**: Shrubs, grassland\n- **0.5 to 0.8**: Dense vegetation, healthy crops\n- **0.8 to 1**: Very dense vegetation (tropical forest)\n\n### 4.10 NDVI Histogram and Distribution Analysis\n\n### üìù Exercise 2: Calculate and Visualize NDWI (Water Index)\n\n**NDWI (Normalized Difference Water Index)** is used to detect water bodies.\n\n$$NDWI = \\frac{Green - NIR}{Green + NIR}$$\n\n**Task:**\n1. Write a function to calculate NDWI\n2. Calculate NDWI from the Green and NIR bands\n3. Create a visualization showing water bodies\n4. Calculate statistics (min, max, mean)\n\n**Hints:**\n- NDWI > 0.3: Water\n- NDWI 0 to 0.3: Wetlands/moist soil\n- NDWI < 0: Dry land/vegetation\n\n<details>\n<summary><b>Click to see solution</b></summary>\n\n```python\ndef calculate_ndwi(green, nir):\n    \"\"\"\n    Calculate Normalized Difference Water Index.\n    NDWI = (Green - NIR) / (Green + NIR)\n    \"\"\"\n    green = green.astype(float)\n    nir = nir.astype(float)\n    \n    denominator = green + nir\n    ndwi = np.where(denominator != 0, (green - nir) / denominator, 0)\n    \n    return ndwi\n\n# Calculate NDWI\nndwi = calculate_ndwi(green, nir)\n\n# Statistics\nprint(\"NDWI Statistics:\")\nprint(f\"  Min:    {ndwi.min():.3f}\")\nprint(f\"  Max:    {ndwi.max():.3f}\")\nprint(f\"  Mean:   {ndwi.mean():.3f}\")\nprint(f\"  Median: {np.median(ndwi):.3f}\")\n\n# Water area calculation\nwater_pixels = np.sum(ndwi > 0.3)\nwater_area_km2 = water_pixels * pixel_area_km2\nprint(f\"\\nWater bodies (NDWI > 0.3): {water_area_km2:.1f} km¬≤\")\n\n# Visualization\nfig, ax = plt.subplots(figsize=(12, 10))\n\nim = ax.imshow(ndwi, cmap='Blues', vmin=-0.5, vmax=0.5)\ncbar = plt.colorbar(im, ax=ax, shrink=0.8)\ncbar.set_label('NDWI', fontsize=12, fontweight='bold')\n\nax.set_title('NDWI - Normalized Difference Water Index',\n             fontsize=14, fontweight='bold', pad=15)\nax.set_xlabel('Column (pixel)', fontsize=11)\nax.set_ylabel('Row (pixel)', fontsize=11)\n\n# Add legend\nlegend_text = (\n    \"NDWI Interpretation:\\n\\n\"\n    \"> 0.3 (Dark Blue)\\n\"\n    \"  Water bodies\\n\\n\"\n    \"0 to 0.3 (Light Blue)\\n\"\n    \"  Wetlands, moist soil\\n\\n\"\n    \"< 0 (White/Gray)\\n\"\n    \"  Dry land, vegetation\"\n)\nax.text(1.12, 0.5, legend_text,\n        transform=ax.transAxes,\n        fontsize=9,\n        verticalalignment='center',\n        bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.9),\n        family='monospace')\n\nplt.tight_layout()\nplt.show()\n```\n</details>\n\n---\n\n## Part 5: Combined Operations - Vector and Raster Integration\n\n**The real power of geospatial analysis comes from combining vector and raster data.**\n\nCommon workflows:\n- Clip raster to administrative boundaries\n- Extract statistics per province/region\n- Overlay boundaries on satellite imagery\n- Sample raster values at point locations\n\n### 5.1 Clipping Raster to Vector Boundary\n\n### 5.2 Overlay Vector Boundaries on Raster\n\n### 5.3 Zonal Statistics - Calculate Mean NDVI per Province\n\n### 5.4 Saving Results\n\n---\n\n## Part 6: Best Practices and Common Pitfalls\n\n### 6.1 Memory Management\n\n### 6.2 CRS Alignment - CRITICAL!\n\n### 6.3 Handling NoData Values\n\n### 6.4 Common Errors and Solutions\n\n---\n\n## Summary and Key Takeaways\n\n### What You've Learned Today:\n\n#### 1. **GeoPandas for Vector Data**\n‚úì Loading and inspecting shapefiles/GeoJSON  \n‚úì Filtering by attributes and spatial queries  \n‚úì CRS transformations and projections  \n‚úì Creating professional maps and visualizations  \n‚úì Spatial operations (buffer, intersection, union)\n\n#### 2. **Rasterio for Raster Data**\n‚úì Reading multi-band satellite imagery  \n‚úì Extracting metadata and band information  \n‚úì Processing bands as NumPy arrays  \n‚úì Calculating statistics and percentiles  \n‚úì Creating RGB and false color composites\n\n#### 3. **Vegetation Indices**\n‚úì NDVI calculation and interpretation  \n‚úì NDWI for water body detection  \n‚úì Histogram analysis and thresholding  \n‚úì Land cover classification based on indices\n\n#### 4. **Integrated Workflows**\n‚úì Clipping rasters to vector boundaries  \n‚úì Overlaying vectors on rasters  \n‚úì Zonal statistics (per-province analysis)  \n‚úì Saving results in multiple formats\n\n#### 5. **Best Practices**\n‚úì Memory management techniques  \n‚úì CRS alignment (CRITICAL!)  \n‚úì NoData value handling  \n‚úì Error prevention and debugging\n\n---\n\n### Why This Matters for AI/ML\n\n**These skills are ESSENTIAL for:**\n\n1. **Data Preparation**\n   - Loading training data (labeled polygons)\n   - Preprocessing satellite imagery\n   - Creating feature layers for models\n\n2. **Feature Engineering**\n   - Calculating spectral indices (NDVI, NDWI, etc.)\n   - Extracting texture features\n   - Creating multi-temporal composites\n\n3. **Model Training**\n   - Sampling training pixels\n   - Creating validation datasets\n   - Balancing class distributions\n\n4. **Result Analysis**\n   - Visualizing model predictions\n   - Calculating accuracy metrics\n   - Validating against ground truth\n\n5. **Deployment**\n   - Processing new satellite scenes\n   - Generating operational products\n   - Creating decision support maps\n\n---\n\n### Philippine EO Applications\n\n**You can now build applications for:**\n\n**Disaster Risk Reduction (DRR):**\n- Flood extent mapping using NDWI\n- Landslide susceptibility analysis\n- Typhoon damage assessment\n\n**Climate Change Adaptation (CCA):**\n- Vegetation health monitoring (NDVI)\n- Drought impact assessment\n- Coastal erosion detection\n\n**Natural Resource Management (NRM):**\n- Forest cover monitoring\n- Agricultural land mapping\n- Marine protected area monitoring\n\n---\n\n## Next Session: Google Earth Engine Python API\n\n**Session 4 will cover:**\n- Accessing petabytes of satellite data in the cloud\n- Processing Sentinel-1 and Sentinel-2 at scale\n- Cloud masking and temporal compositing\n- Exporting data for ML workflows\n- Integrating GEE with local Python analysis\n\n**Preview:**\n```python\nimport ee\nee.Initialize()\n\n# Access entire Sentinel-2 archive\ns2 = ee.ImageCollection('COPERNICUS/S2_SR') \\\n    .filterBounds(palawan) \\\n    .filterDate('2024-01-01', '2024-12-31') \\\n    .map(mask_clouds)\n\n# Create cloud-free composite\ncomposite = s2.median()\n\n# Calculate NDVI at planetary scale!\nndvi = composite.normalizedDifference(['B8', 'B4'])\n```\n\n---\n\n## Additional Resources\n\n### Documentation\n- **GeoPandas:** https://geopandas.org/\n- **Rasterio:** https://rasterio.readthedocs.io/\n- **NumPy:** https://numpy.org/doc/\n- **Matplotlib:** https://matplotlib.org/\n\n### Tutorials\n- **Carpentries Geospatial Python:** https://carpentries-incubator.github.io/geospatial-python/\n- **Earth Data Science:** https://www.earthdatascience.org/\n- **Python for Geospatial Analysis:** https://www.tomasbeuzen.com/python-for-geospatial-analysis/\n\n### Philippine Data Sources\n- **PhilSA:** https://philsa.gov.ph/\n- **NAMRIA Geoportal:** https://www.geoportal.gov.ph/\n- **DOST-ASTI DATOS:** https://asti.dost.gov.ph/\n- **HDX Philippines:** https://data.humdata.org/group/phl\n- **HazardHunterPH:** https://hazardhunter.georisk.gov.ph/\n\n### Books\n- *Geoprocessing with Python* (Garrard)\n- *Learning Geospatial Analysis with Python* (Lawhead)\n- *Python for Data Analysis* (McKinney)\n\n---\n\n## Practice Exercises (Optional Homework)\n\nTo reinforce your learning:\n\n### Exercise A: Multi-Province Analysis\nCalculate and compare NDVI statistics for all provinces in one island group.\n\n### Exercise B: Time-Series Simulation\nCreate multiple synthetic images representing different seasons and analyze NDVI changes.\n\n### Exercise C: Custom Index\nResearch and implement another vegetation index (EVI, SAVI, or MSAVI).\n\n### Exercise D: Real Data\nDownload actual Sentinel-2 data from Copernicus Data Space and apply these techniques.\n\n### Exercise E: Water Detection\nUse NDWI to create a binary water mask and calculate total water area.\n\n---\n\n## Clean Up\n\n---\n\n# üéâ Congratulations!\n\nYou've completed **Day 1, Session 3** of the CopPhil AI/ML Training!\n\n### You now have the skills to:\n‚úÖ Work with vector data using GeoPandas  \n‚úÖ Process satellite imagery with Rasterio  \n‚úÖ Calculate vegetation indices (NDVI, NDWI)  \n‚úÖ Combine vector and raster data  \n‚úÖ Create professional visualizations  \n‚úÖ Apply best practices for geospatial Python  \n\n### These are the **foundational skills** for ALL AI/ML work in Earth Observation!\n\n**Ready for Session 4?** We'll take these skills to the cloud with Google Earth Engine!\n\n---\n\n*ü§ñ Generated with Claude Code for CopPhil Digital Space Campus*\n\n*EU-Philippines Copernicus Capacity Support Programme*\n\n*Data-Centric AI for Earth Observation*\n\n---\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["include-code-files"],"css":["../styles/custom.css"],"toc":true,"toc-depth":3,"number-sections":false,"output-file":"Day1_Session3_Python_Geospatial_Data.html"},"language":{"toc-title-document":"Contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Instructor","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","comments":{"hypothesis":false,"utterances":{"repo":"copphil-training/day1"}},"theme":{"light":["cosmo","../styles/custom.scss"],"dark":["darkly","../styles/custom.scss"]},"toc-expand":2,"toc-title":"On This Page","code-copy":true,"smooth-scroll":true,"anchor-sections":true,"fig-cap-location":"bottom","tbl-cap-location":"top","citations-hover":true,"footnotes-hover":true,"title":"Day 1, Session 3: Python for Geospatial Data"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}